// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/berachain/stargazer/wasp/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newEthLog(db *gorm.DB, opts ...gen.DOOption) ethLog {
	_ethLog := ethLog{}

	_ethLog.ethLogDo.UseDB(db, opts...)
	_ethLog.ethLogDo.UseModel(&models.EthLog{})

	tableName := _ethLog.ethLogDo.TableName()
	_ethLog.ALL = field.NewAsterisk(tableName)
	_ethLog.ID = field.NewInt64(tableName, "id")
	_ethLog.Address = field.NewBytes(tableName, "address")
	_ethLog.Topics = field.NewField(tableName, "topics")
	_ethLog.Data = field.NewBytes(tableName, "data")
	_ethLog.BlockNumber = field.NewString(tableName, "block_number")
	_ethLog.TxHash = field.NewBytes(tableName, "tx_hash")
	_ethLog.TxIndex = field.NewUint(tableName, "tx_index")
	_ethLog.BlockHash = field.NewBytes(tableName, "block_hash")
	_ethLog.Index = field.NewUint(tableName, "index")
	_ethLog.Removed = field.NewBool(tableName, "removed")

	_ethLog.fillFieldMap()

	return _ethLog
}

type ethLog struct {
	ethLogDo ethLogDo

	ALL         field.Asterisk
	ID          field.Int64
	Address     field.Bytes
	Topics      field.Field
	Data        field.Bytes
	BlockNumber field.String
	TxHash      field.Bytes
	TxIndex     field.Uint
	BlockHash   field.Bytes
	Index       field.Uint
	Removed     field.Bool

	fieldMap map[string]field.Expr
}

func (e ethLog) Table(newTableName string) *ethLog {
	e.ethLogDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ethLog) As(alias string) *ethLog {
	e.ethLogDo.DO = *(e.ethLogDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ethLog) updateTableName(table string) *ethLog {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Address = field.NewBytes(table, "address")
	e.Topics = field.NewField(table, "topics")
	e.Data = field.NewBytes(table, "data")
	e.BlockNumber = field.NewString(table, "block_number")
	e.TxHash = field.NewBytes(table, "tx_hash")
	e.TxIndex = field.NewUint(table, "tx_index")
	e.BlockHash = field.NewBytes(table, "block_hash")
	e.Index = field.NewUint(table, "index")
	e.Removed = field.NewBool(table, "removed")

	e.fillFieldMap()

	return e
}

func (e *ethLog) WithContext(ctx context.Context) IEthLogDo { return e.ethLogDo.WithContext(ctx) }

func (e ethLog) TableName() string { return e.ethLogDo.TableName() }

func (e ethLog) Alias() string { return e.ethLogDo.Alias() }

func (e *ethLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ethLog) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 10)
	e.fieldMap["id"] = e.ID
	e.fieldMap["address"] = e.Address
	e.fieldMap["topics"] = e.Topics
	e.fieldMap["data"] = e.Data
	e.fieldMap["block_number"] = e.BlockNumber
	e.fieldMap["tx_hash"] = e.TxHash
	e.fieldMap["tx_index"] = e.TxIndex
	e.fieldMap["block_hash"] = e.BlockHash
	e.fieldMap["index"] = e.Index
	e.fieldMap["removed"] = e.Removed
}

func (e ethLog) clone(db *gorm.DB) ethLog {
	e.ethLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ethLog) replaceDB(db *gorm.DB) ethLog {
	e.ethLogDo.ReplaceDB(db)
	return e
}

type ethLogDo struct{ gen.DO }

type IEthLogDo interface {
	gen.SubQuery
	Debug() IEthLogDo
	WithContext(ctx context.Context) IEthLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEthLogDo
	WriteDB() IEthLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEthLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEthLogDo
	Not(conds ...gen.Condition) IEthLogDo
	Or(conds ...gen.Condition) IEthLogDo
	Select(conds ...field.Expr) IEthLogDo
	Where(conds ...gen.Condition) IEthLogDo
	Order(conds ...field.Expr) IEthLogDo
	Distinct(cols ...field.Expr) IEthLogDo
	Omit(cols ...field.Expr) IEthLogDo
	Join(table schema.Tabler, on ...field.Expr) IEthLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEthLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEthLogDo
	Group(cols ...field.Expr) IEthLogDo
	Having(conds ...gen.Condition) IEthLogDo
	Limit(limit int) IEthLogDo
	Offset(offset int) IEthLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEthLogDo
	Unscoped() IEthLogDo
	Create(values ...*models.EthLog) error
	CreateInBatches(values []*models.EthLog, batchSize int) error
	Save(values ...*models.EthLog) error
	First() (*models.EthLog, error)
	Take() (*models.EthLog, error)
	Last() (*models.EthLog, error)
	Find() ([]*models.EthLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.EthLog, err error)
	FindInBatches(result *[]*models.EthLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.EthLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEthLogDo
	Assign(attrs ...field.AssignExpr) IEthLogDo
	Joins(fields ...field.RelationField) IEthLogDo
	Preload(fields ...field.RelationField) IEthLogDo
	FirstOrInit() (*models.EthLog, error)
	FirstOrCreate() (*models.EthLog, error)
	FindByPage(offset int, limit int) (result []*models.EthLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEthLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ethLogDo) Debug() IEthLogDo {
	return e.withDO(e.DO.Debug())
}

func (e ethLogDo) WithContext(ctx context.Context) IEthLogDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ethLogDo) ReadDB() IEthLogDo {
	return e.Clauses(dbresolver.Read)
}

func (e ethLogDo) WriteDB() IEthLogDo {
	return e.Clauses(dbresolver.Write)
}

func (e ethLogDo) Session(config *gorm.Session) IEthLogDo {
	return e.withDO(e.DO.Session(config))
}

func (e ethLogDo) Clauses(conds ...clause.Expression) IEthLogDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ethLogDo) Returning(value interface{}, columns ...string) IEthLogDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ethLogDo) Not(conds ...gen.Condition) IEthLogDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ethLogDo) Or(conds ...gen.Condition) IEthLogDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ethLogDo) Select(conds ...field.Expr) IEthLogDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ethLogDo) Where(conds ...gen.Condition) IEthLogDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ethLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IEthLogDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e ethLogDo) Order(conds ...field.Expr) IEthLogDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ethLogDo) Distinct(cols ...field.Expr) IEthLogDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ethLogDo) Omit(cols ...field.Expr) IEthLogDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ethLogDo) Join(table schema.Tabler, on ...field.Expr) IEthLogDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ethLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEthLogDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ethLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IEthLogDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ethLogDo) Group(cols ...field.Expr) IEthLogDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ethLogDo) Having(conds ...gen.Condition) IEthLogDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ethLogDo) Limit(limit int) IEthLogDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ethLogDo) Offset(offset int) IEthLogDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ethLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEthLogDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ethLogDo) Unscoped() IEthLogDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ethLogDo) Create(values ...*models.EthLog) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ethLogDo) CreateInBatches(values []*models.EthLog, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ethLogDo) Save(values ...*models.EthLog) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ethLogDo) First() (*models.EthLog, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.EthLog), nil
	}
}

func (e ethLogDo) Take() (*models.EthLog, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.EthLog), nil
	}
}

func (e ethLogDo) Last() (*models.EthLog, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.EthLog), nil
	}
}

func (e ethLogDo) Find() ([]*models.EthLog, error) {
	result, err := e.DO.Find()
	return result.([]*models.EthLog), err
}

func (e ethLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.EthLog, err error) {
	buf := make([]*models.EthLog, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ethLogDo) FindInBatches(result *[]*models.EthLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ethLogDo) Attrs(attrs ...field.AssignExpr) IEthLogDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ethLogDo) Assign(attrs ...field.AssignExpr) IEthLogDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ethLogDo) Joins(fields ...field.RelationField) IEthLogDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ethLogDo) Preload(fields ...field.RelationField) IEthLogDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ethLogDo) FirstOrInit() (*models.EthLog, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.EthLog), nil
	}
}

func (e ethLogDo) FirstOrCreate() (*models.EthLog, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.EthLog), nil
	}
}

func (e ethLogDo) FindByPage(offset int, limit int) (result []*models.EthLog, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ethLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ethLogDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ethLogDo) Delete(models ...*models.EthLog) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ethLogDo) withDO(do gen.Dao) *ethLogDo {
	e.DO = *do.(*gen.DO)
	return e
}
