// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/berachain/stargazer/wasp/models"
)

func newContract(db *gorm.DB, opts ...gen.DOOption) contract {
	_contract := contract{}

	_contract.contractDo.UseDB(db, opts...)
	_contract.contractDo.UseModel(&models.Contract{})

	tableName := _contract.contractDo.TableName()
	_contract.ALL = field.NewAsterisk(tableName)
	_contract.ID = field.NewInt64(tableName, "id")
	_contract.Address = field.NewBytes(tableName, "contract_address")
	_contract.Creator = field.NewBytes(tableName, "creator")
	_contract.DeployTxnHash = field.NewBytes(tableName, "deploy_txn_hash")
	_contract.AbiId = field.NewString(tableName, "abi_id")
	_contract.Abi = contractHasOneAbi{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Abi", "models.Abi"),
	}

	_contract.fillFieldMap()

	return _contract
}

type contract struct {
	contractDo contractDo

	ALL           field.Asterisk
	ID            field.Int64
	Address       field.Bytes
	Creator       field.Bytes
	DeployTxnHash field.Bytes
	AbiId         field.String
	Abi           contractHasOneAbi

	fieldMap map[string]field.Expr
}

func (c contract) Table(newTableName string) *contract {
	c.contractDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c contract) As(alias string) *contract {
	c.contractDo.DO = *(c.contractDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *contract) updateTableName(table string) *contract {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Address = field.NewBytes(table, "contract_address")
	c.Creator = field.NewBytes(table, "creator")
	c.DeployTxnHash = field.NewBytes(table, "deploy_txn_hash")
	c.AbiId = field.NewString(table, "abi_id")

	c.fillFieldMap()

	return c
}

func (c *contract) WithContext(ctx context.Context) IContractDo { return c.contractDo.WithContext(ctx) }

func (c contract) TableName() string { return c.contractDo.TableName() }

func (c contract) Alias() string { return c.contractDo.Alias() }

func (c *contract) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *contract) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["contract_address"] = c.Address
	c.fieldMap["creator"] = c.Creator
	c.fieldMap["deploy_txn_hash"] = c.DeployTxnHash
	c.fieldMap["abi_id"] = c.AbiId

}

func (c contract) clone(db *gorm.DB) contract {
	c.contractDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c contract) replaceDB(db *gorm.DB) contract {
	c.contractDo.ReplaceDB(db)
	return c
}

type contractHasOneAbi struct {
	db *gorm.DB

	field.RelationField
}

func (a contractHasOneAbi) Where(conds ...field.Expr) *contractHasOneAbi {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a contractHasOneAbi) WithContext(ctx context.Context) *contractHasOneAbi {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a contractHasOneAbi) Model(m *models.Contract) *contractHasOneAbiTx {
	return &contractHasOneAbiTx{a.db.Model(m).Association(a.Name())}
}

type contractHasOneAbiTx struct{ tx *gorm.Association }

func (a contractHasOneAbiTx) Find() (result *models.Abi, err error) {
	return result, a.tx.Find(&result)
}

func (a contractHasOneAbiTx) Append(values ...*models.Abi) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a contractHasOneAbiTx) Replace(values ...*models.Abi) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a contractHasOneAbiTx) Delete(values ...*models.Abi) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a contractHasOneAbiTx) Clear() error {
	return a.tx.Clear()
}

func (a contractHasOneAbiTx) Count() int64 {
	return a.tx.Count()
}

type contractDo struct{ gen.DO }

type IContractDo interface {
	gen.SubQuery
	Debug() IContractDo
	WithContext(ctx context.Context) IContractDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IContractDo
	WriteDB() IContractDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IContractDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IContractDo
	Not(conds ...gen.Condition) IContractDo
	Or(conds ...gen.Condition) IContractDo
	Select(conds ...field.Expr) IContractDo
	Where(conds ...gen.Condition) IContractDo
	Order(conds ...field.Expr) IContractDo
	Distinct(cols ...field.Expr) IContractDo
	Omit(cols ...field.Expr) IContractDo
	Join(table schema.Tabler, on ...field.Expr) IContractDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IContractDo
	RightJoin(table schema.Tabler, on ...field.Expr) IContractDo
	Group(cols ...field.Expr) IContractDo
	Having(conds ...gen.Condition) IContractDo
	Limit(limit int) IContractDo
	Offset(offset int) IContractDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IContractDo
	Unscoped() IContractDo
	Create(values ...*models.Contract) error
	CreateInBatches(values []*models.Contract, batchSize int) error
	Save(values ...*models.Contract) error
	First() (*models.Contract, error)
	Take() (*models.Contract, error)
	Last() (*models.Contract, error)
	Find() ([]*models.Contract, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Contract, err error)
	FindInBatches(result *[]*models.Contract, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Contract) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IContractDo
	Assign(attrs ...field.AssignExpr) IContractDo
	Joins(fields ...field.RelationField) IContractDo
	Preload(fields ...field.RelationField) IContractDo
	FirstOrInit() (*models.Contract, error)
	FirstOrCreate() (*models.Contract, error)
	FindByPage(offset int, limit int) (result []*models.Contract, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IContractDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c contractDo) Debug() IContractDo {
	return c.withDO(c.DO.Debug())
}

func (c contractDo) WithContext(ctx context.Context) IContractDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c contractDo) ReadDB() IContractDo {
	return c.Clauses(dbresolver.Read)
}

func (c contractDo) WriteDB() IContractDo {
	return c.Clauses(dbresolver.Write)
}

func (c contractDo) Session(config *gorm.Session) IContractDo {
	return c.withDO(c.DO.Session(config))
}

func (c contractDo) Clauses(conds ...clause.Expression) IContractDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c contractDo) Returning(value interface{}, columns ...string) IContractDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c contractDo) Not(conds ...gen.Condition) IContractDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c contractDo) Or(conds ...gen.Condition) IContractDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c contractDo) Select(conds ...field.Expr) IContractDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c contractDo) Where(conds ...gen.Condition) IContractDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c contractDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IContractDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c contractDo) Order(conds ...field.Expr) IContractDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c contractDo) Distinct(cols ...field.Expr) IContractDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c contractDo) Omit(cols ...field.Expr) IContractDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c contractDo) Join(table schema.Tabler, on ...field.Expr) IContractDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c contractDo) LeftJoin(table schema.Tabler, on ...field.Expr) IContractDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c contractDo) RightJoin(table schema.Tabler, on ...field.Expr) IContractDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c contractDo) Group(cols ...field.Expr) IContractDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c contractDo) Having(conds ...gen.Condition) IContractDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c contractDo) Limit(limit int) IContractDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c contractDo) Offset(offset int) IContractDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c contractDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IContractDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c contractDo) Unscoped() IContractDo {
	return c.withDO(c.DO.Unscoped())
}

func (c contractDo) Create(values ...*models.Contract) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c contractDo) CreateInBatches(values []*models.Contract, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c contractDo) Save(values ...*models.Contract) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c contractDo) First() (*models.Contract, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Contract), nil
	}
}

func (c contractDo) Take() (*models.Contract, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Contract), nil
	}
}

func (c contractDo) Last() (*models.Contract, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Contract), nil
	}
}

func (c contractDo) Find() ([]*models.Contract, error) {
	result, err := c.DO.Find()
	return result.([]*models.Contract), err
}

func (c contractDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Contract, err error) {
	buf := make([]*models.Contract, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c contractDo) FindInBatches(result *[]*models.Contract, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c contractDo) Attrs(attrs ...field.AssignExpr) IContractDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c contractDo) Assign(attrs ...field.AssignExpr) IContractDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c contractDo) Joins(fields ...field.RelationField) IContractDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c contractDo) Preload(fields ...field.RelationField) IContractDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c contractDo) FirstOrInit() (*models.Contract, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Contract), nil
	}
}

func (c contractDo) FirstOrCreate() (*models.Contract, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Contract), nil
	}
}

func (c contractDo) FindByPage(offset int, limit int) (result []*models.Contract, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c contractDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c contractDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c contractDo) Delete(models ...*models.Contract) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *contractDo) withDO(do gen.Dao) *contractDo {
	c.DO = *do.(*gen.DO)
	return c
}
