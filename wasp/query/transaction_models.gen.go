// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/berachain/stargazer/wasp/models"
)

func newTransactionModel(db *gorm.DB, opts ...gen.DOOption) transactionModel {
	_transactionModel := transactionModel{}

	_transactionModel.transactionModelDo.UseDB(db, opts...)
	_transactionModel.transactionModelDo.UseModel(&models.TransactionModel{})

	tableName := _transactionModel.transactionModelDo.TableName()
	_transactionModel.ALL = field.NewAsterisk(tableName)
	_transactionModel.ID = field.NewInt64(tableName, "id")
	_transactionModel.Number = field.NewString(tableName, "number")
	_transactionModel.Hash = field.NewBytes(tableName, "hash")
	_transactionModel.Size = field.NewString(tableName, "size")
	_transactionModel.Time = field.NewUint64(tableName, "time")
	_transactionModel.From = field.NewBytes(tableName, "from")
	_transactionModel.Type = field.NewUint8(tableName, "type")
	_transactionModel.ChainID = field.NewUint64(tableName, "chain_id")
	_transactionModel.Data = field.NewBytes(tableName, "data")
	_transactionModel.Gas = field.NewUint64(tableName, "gas")
	_transactionModel.GasPrice = field.NewString(tableName, "gas_price")
	_transactionModel.GasTipCap = field.NewString(tableName, "gas_tip_cap")
	_transactionModel.GasFeeCap = field.NewString(tableName, "gas_fee_cap")
	_transactionModel.Value = field.NewString(tableName, "value")
	_transactionModel.Nonce = field.NewUint64(tableName, "nonce")
	_transactionModel.To = field.NewBytes(tableName, "to")

	_transactionModel.fillFieldMap()

	return _transactionModel
}

type transactionModel struct {
	transactionModelDo transactionModelDo

	ALL       field.Asterisk
	ID        field.Int64
	Number    field.String
	Hash      field.Bytes
	Size      field.String
	Time      field.Uint64
	From      field.Bytes
	Type      field.Uint8
	ChainID   field.Uint64
	Data      field.Bytes
	Gas       field.Uint64
	GasPrice  field.String
	GasTipCap field.String
	GasFeeCap field.String
	Value     field.String
	Nonce     field.Uint64
	To        field.Bytes

	fieldMap map[string]field.Expr
}

func (t transactionModel) Table(newTableName string) *transactionModel {
	t.transactionModelDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t transactionModel) As(alias string) *transactionModel {
	t.transactionModelDo.DO = *(t.transactionModelDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *transactionModel) updateTableName(table string) *transactionModel {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.Number = field.NewString(table, "number")
	t.Hash = field.NewBytes(table, "hash")
	t.Size = field.NewString(table, "size")
	t.Time = field.NewUint64(table, "time")
	t.From = field.NewBytes(table, "from")
	t.Type = field.NewUint8(table, "type")
	t.ChainID = field.NewUint64(table, "chain_id")
	t.Data = field.NewBytes(table, "data")
	t.Gas = field.NewUint64(table, "gas")
	t.GasPrice = field.NewString(table, "gas_price")
	t.GasTipCap = field.NewString(table, "gas_tip_cap")
	t.GasFeeCap = field.NewString(table, "gas_fee_cap")
	t.Value = field.NewString(table, "value")
	t.Nonce = field.NewUint64(table, "nonce")
	t.To = field.NewBytes(table, "to")

	t.fillFieldMap()

	return t
}

func (t *transactionModel) WithContext(ctx context.Context) ITransactionModelDo {
	return t.transactionModelDo.WithContext(ctx)
}

func (t transactionModel) TableName() string { return t.transactionModelDo.TableName() }

func (t transactionModel) Alias() string { return t.transactionModelDo.Alias() }

func (t *transactionModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *transactionModel) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 16)
	t.fieldMap["id"] = t.ID
	t.fieldMap["number"] = t.Number
	t.fieldMap["hash"] = t.Hash
	t.fieldMap["size"] = t.Size
	t.fieldMap["time"] = t.Time
	t.fieldMap["from"] = t.From
	t.fieldMap["type"] = t.Type
	t.fieldMap["chain_id"] = t.ChainID
	t.fieldMap["data"] = t.Data
	t.fieldMap["gas"] = t.Gas
	t.fieldMap["gas_price"] = t.GasPrice
	t.fieldMap["gas_tip_cap"] = t.GasTipCap
	t.fieldMap["gas_fee_cap"] = t.GasFeeCap
	t.fieldMap["value"] = t.Value
	t.fieldMap["nonce"] = t.Nonce
	t.fieldMap["to"] = t.To
}

func (t transactionModel) clone(db *gorm.DB) transactionModel {
	t.transactionModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t transactionModel) replaceDB(db *gorm.DB) transactionModel {
	t.transactionModelDo.ReplaceDB(db)
	return t
}

type transactionModelDo struct{ gen.DO }

type ITransactionModelDo interface {
	gen.SubQuery
	Debug() ITransactionModelDo
	WithContext(ctx context.Context) ITransactionModelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITransactionModelDo
	WriteDB() ITransactionModelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITransactionModelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITransactionModelDo
	Not(conds ...gen.Condition) ITransactionModelDo
	Or(conds ...gen.Condition) ITransactionModelDo
	Select(conds ...field.Expr) ITransactionModelDo
	Where(conds ...gen.Condition) ITransactionModelDo
	Order(conds ...field.Expr) ITransactionModelDo
	Distinct(cols ...field.Expr) ITransactionModelDo
	Omit(cols ...field.Expr) ITransactionModelDo
	Join(table schema.Tabler, on ...field.Expr) ITransactionModelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionModelDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITransactionModelDo
	Group(cols ...field.Expr) ITransactionModelDo
	Having(conds ...gen.Condition) ITransactionModelDo
	Limit(limit int) ITransactionModelDo
	Offset(offset int) ITransactionModelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionModelDo
	Unscoped() ITransactionModelDo
	Create(values ...*models.TransactionModel) error
	CreateInBatches(values []*models.TransactionModel, batchSize int) error
	Save(values ...*models.TransactionModel) error
	First() (*models.TransactionModel, error)
	Take() (*models.TransactionModel, error)
	Last() (*models.TransactionModel, error)
	Find() ([]*models.TransactionModel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.TransactionModel, err error)
	FindInBatches(result *[]*models.TransactionModel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.TransactionModel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITransactionModelDo
	Assign(attrs ...field.AssignExpr) ITransactionModelDo
	Joins(fields ...field.RelationField) ITransactionModelDo
	Preload(fields ...field.RelationField) ITransactionModelDo
	FirstOrInit() (*models.TransactionModel, error)
	FirstOrCreate() (*models.TransactionModel, error)
	FindByPage(offset int, limit int) (result []*models.TransactionModel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITransactionModelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t transactionModelDo) Debug() ITransactionModelDo {
	return t.withDO(t.DO.Debug())
}

func (t transactionModelDo) WithContext(ctx context.Context) ITransactionModelDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t transactionModelDo) ReadDB() ITransactionModelDo {
	return t.Clauses(dbresolver.Read)
}

func (t transactionModelDo) WriteDB() ITransactionModelDo {
	return t.Clauses(dbresolver.Write)
}

func (t transactionModelDo) Session(config *gorm.Session) ITransactionModelDo {
	return t.withDO(t.DO.Session(config))
}

func (t transactionModelDo) Clauses(conds ...clause.Expression) ITransactionModelDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t transactionModelDo) Returning(value interface{}, columns ...string) ITransactionModelDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t transactionModelDo) Not(conds ...gen.Condition) ITransactionModelDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t transactionModelDo) Or(conds ...gen.Condition) ITransactionModelDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t transactionModelDo) Select(conds ...field.Expr) ITransactionModelDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t transactionModelDo) Where(conds ...gen.Condition) ITransactionModelDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t transactionModelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITransactionModelDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t transactionModelDo) Order(conds ...field.Expr) ITransactionModelDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t transactionModelDo) Distinct(cols ...field.Expr) ITransactionModelDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t transactionModelDo) Omit(cols ...field.Expr) ITransactionModelDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t transactionModelDo) Join(table schema.Tabler, on ...field.Expr) ITransactionModelDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t transactionModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionModelDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t transactionModelDo) RightJoin(table schema.Tabler, on ...field.Expr) ITransactionModelDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t transactionModelDo) Group(cols ...field.Expr) ITransactionModelDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t transactionModelDo) Having(conds ...gen.Condition) ITransactionModelDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t transactionModelDo) Limit(limit int) ITransactionModelDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t transactionModelDo) Offset(offset int) ITransactionModelDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t transactionModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionModelDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t transactionModelDo) Unscoped() ITransactionModelDo {
	return t.withDO(t.DO.Unscoped())
}

func (t transactionModelDo) Create(values ...*models.TransactionModel) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t transactionModelDo) CreateInBatches(values []*models.TransactionModel, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t transactionModelDo) Save(values ...*models.TransactionModel) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t transactionModelDo) First() (*models.TransactionModel, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.TransactionModel), nil
	}
}

func (t transactionModelDo) Take() (*models.TransactionModel, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.TransactionModel), nil
	}
}

func (t transactionModelDo) Last() (*models.TransactionModel, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.TransactionModel), nil
	}
}

func (t transactionModelDo) Find() ([]*models.TransactionModel, error) {
	result, err := t.DO.Find()
	return result.([]*models.TransactionModel), err
}

func (t transactionModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.TransactionModel, err error) {
	buf := make([]*models.TransactionModel, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t transactionModelDo) FindInBatches(result *[]*models.TransactionModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t transactionModelDo) Attrs(attrs ...field.AssignExpr) ITransactionModelDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t transactionModelDo) Assign(attrs ...field.AssignExpr) ITransactionModelDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t transactionModelDo) Joins(fields ...field.RelationField) ITransactionModelDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t transactionModelDo) Preload(fields ...field.RelationField) ITransactionModelDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t transactionModelDo) FirstOrInit() (*models.TransactionModel, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.TransactionModel), nil
	}
}

func (t transactionModelDo) FirstOrCreate() (*models.TransactionModel, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.TransactionModel), nil
	}
}

func (t transactionModelDo) FindByPage(offset int, limit int) (result []*models.TransactionModel, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t transactionModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t transactionModelDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t transactionModelDo) Delete(models ...*models.TransactionModel) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *transactionModelDo) withDO(do gen.Dao) *transactionModelDo {
	t.DO = *do.(*gen.DO)
	return t
}
