// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/berachain/stargazer/wasp/models"
)

func newErc20Balance(db *gorm.DB, opts ...gen.DOOption) erc20Balance {
	_erc20Balance := erc20Balance{}

	_erc20Balance.erc20BalanceDo.UseDB(db, opts...)
	_erc20Balance.erc20BalanceDo.UseModel(&models.Erc20Balance{})

	tableName := _erc20Balance.erc20BalanceDo.TableName()
	_erc20Balance.ALL = field.NewAsterisk(tableName)
	_erc20Balance.ID = field.NewInt64(tableName, "id")
	_erc20Balance.Address = field.NewBytes(tableName, "owner")
	_erc20Balance.ContractAddress = field.NewBytes(tableName, "contract_address")
	_erc20Balance.Amount = field.NewString(tableName, "amount")

	_erc20Balance.fillFieldMap()

	return _erc20Balance
}

type erc20Balance struct {
	erc20BalanceDo erc20BalanceDo

	ALL             field.Asterisk
	ID              field.Int64
	Address         field.Bytes
	ContractAddress field.Bytes
	Amount          field.String

	fieldMap map[string]field.Expr
}

func (e erc20Balance) Table(newTableName string) *erc20Balance {
	e.erc20BalanceDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e erc20Balance) As(alias string) *erc20Balance {
	e.erc20BalanceDo.DO = *(e.erc20BalanceDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *erc20Balance) updateTableName(table string) *erc20Balance {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Address = field.NewBytes(table, "owner")
	e.ContractAddress = field.NewBytes(table, "contract_address")
	e.Amount = field.NewString(table, "amount")

	e.fillFieldMap()

	return e
}

func (e *erc20Balance) WithContext(ctx context.Context) IErc20BalanceDo {
	return e.erc20BalanceDo.WithContext(ctx)
}

func (e erc20Balance) TableName() string { return e.erc20BalanceDo.TableName() }

func (e erc20Balance) Alias() string { return e.erc20BalanceDo.Alias() }

func (e *erc20Balance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *erc20Balance) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 4)
	e.fieldMap["id"] = e.ID
	e.fieldMap["owner"] = e.Address
	e.fieldMap["contract_address"] = e.ContractAddress
	e.fieldMap["amount"] = e.Amount
}

func (e erc20Balance) clone(db *gorm.DB) erc20Balance {
	e.erc20BalanceDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e erc20Balance) replaceDB(db *gorm.DB) erc20Balance {
	e.erc20BalanceDo.ReplaceDB(db)
	return e
}

type erc20BalanceDo struct{ gen.DO }

type IErc20BalanceDo interface {
	gen.SubQuery
	Debug() IErc20BalanceDo
	WithContext(ctx context.Context) IErc20BalanceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IErc20BalanceDo
	WriteDB() IErc20BalanceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IErc20BalanceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IErc20BalanceDo
	Not(conds ...gen.Condition) IErc20BalanceDo
	Or(conds ...gen.Condition) IErc20BalanceDo
	Select(conds ...field.Expr) IErc20BalanceDo
	Where(conds ...gen.Condition) IErc20BalanceDo
	Order(conds ...field.Expr) IErc20BalanceDo
	Distinct(cols ...field.Expr) IErc20BalanceDo
	Omit(cols ...field.Expr) IErc20BalanceDo
	Join(table schema.Tabler, on ...field.Expr) IErc20BalanceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IErc20BalanceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IErc20BalanceDo
	Group(cols ...field.Expr) IErc20BalanceDo
	Having(conds ...gen.Condition) IErc20BalanceDo
	Limit(limit int) IErc20BalanceDo
	Offset(offset int) IErc20BalanceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IErc20BalanceDo
	Unscoped() IErc20BalanceDo
	Create(values ...*models.Erc20Balance) error
	CreateInBatches(values []*models.Erc20Balance, batchSize int) error
	Save(values ...*models.Erc20Balance) error
	First() (*models.Erc20Balance, error)
	Take() (*models.Erc20Balance, error)
	Last() (*models.Erc20Balance, error)
	Find() ([]*models.Erc20Balance, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Erc20Balance, err error)
	FindInBatches(result *[]*models.Erc20Balance, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Erc20Balance) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IErc20BalanceDo
	Assign(attrs ...field.AssignExpr) IErc20BalanceDo
	Joins(fields ...field.RelationField) IErc20BalanceDo
	Preload(fields ...field.RelationField) IErc20BalanceDo
	FirstOrInit() (*models.Erc20Balance, error)
	FirstOrCreate() (*models.Erc20Balance, error)
	FindByPage(offset int, limit int) (result []*models.Erc20Balance, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IErc20BalanceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e erc20BalanceDo) Debug() IErc20BalanceDo {
	return e.withDO(e.DO.Debug())
}

func (e erc20BalanceDo) WithContext(ctx context.Context) IErc20BalanceDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e erc20BalanceDo) ReadDB() IErc20BalanceDo {
	return e.Clauses(dbresolver.Read)
}

func (e erc20BalanceDo) WriteDB() IErc20BalanceDo {
	return e.Clauses(dbresolver.Write)
}

func (e erc20BalanceDo) Session(config *gorm.Session) IErc20BalanceDo {
	return e.withDO(e.DO.Session(config))
}

func (e erc20BalanceDo) Clauses(conds ...clause.Expression) IErc20BalanceDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e erc20BalanceDo) Returning(value interface{}, columns ...string) IErc20BalanceDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e erc20BalanceDo) Not(conds ...gen.Condition) IErc20BalanceDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e erc20BalanceDo) Or(conds ...gen.Condition) IErc20BalanceDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e erc20BalanceDo) Select(conds ...field.Expr) IErc20BalanceDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e erc20BalanceDo) Where(conds ...gen.Condition) IErc20BalanceDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e erc20BalanceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IErc20BalanceDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e erc20BalanceDo) Order(conds ...field.Expr) IErc20BalanceDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e erc20BalanceDo) Distinct(cols ...field.Expr) IErc20BalanceDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e erc20BalanceDo) Omit(cols ...field.Expr) IErc20BalanceDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e erc20BalanceDo) Join(table schema.Tabler, on ...field.Expr) IErc20BalanceDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e erc20BalanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IErc20BalanceDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e erc20BalanceDo) RightJoin(table schema.Tabler, on ...field.Expr) IErc20BalanceDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e erc20BalanceDo) Group(cols ...field.Expr) IErc20BalanceDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e erc20BalanceDo) Having(conds ...gen.Condition) IErc20BalanceDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e erc20BalanceDo) Limit(limit int) IErc20BalanceDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e erc20BalanceDo) Offset(offset int) IErc20BalanceDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e erc20BalanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IErc20BalanceDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e erc20BalanceDo) Unscoped() IErc20BalanceDo {
	return e.withDO(e.DO.Unscoped())
}

func (e erc20BalanceDo) Create(values ...*models.Erc20Balance) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e erc20BalanceDo) CreateInBatches(values []*models.Erc20Balance, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e erc20BalanceDo) Save(values ...*models.Erc20Balance) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e erc20BalanceDo) First() (*models.Erc20Balance, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Erc20Balance), nil
	}
}

func (e erc20BalanceDo) Take() (*models.Erc20Balance, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Erc20Balance), nil
	}
}

func (e erc20BalanceDo) Last() (*models.Erc20Balance, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Erc20Balance), nil
	}
}

func (e erc20BalanceDo) Find() ([]*models.Erc20Balance, error) {
	result, err := e.DO.Find()
	return result.([]*models.Erc20Balance), err
}

func (e erc20BalanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Erc20Balance, err error) {
	buf := make([]*models.Erc20Balance, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e erc20BalanceDo) FindInBatches(result *[]*models.Erc20Balance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e erc20BalanceDo) Attrs(attrs ...field.AssignExpr) IErc20BalanceDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e erc20BalanceDo) Assign(attrs ...field.AssignExpr) IErc20BalanceDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e erc20BalanceDo) Joins(fields ...field.RelationField) IErc20BalanceDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e erc20BalanceDo) Preload(fields ...field.RelationField) IErc20BalanceDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e erc20BalanceDo) FirstOrInit() (*models.Erc20Balance, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Erc20Balance), nil
	}
}

func (e erc20BalanceDo) FirstOrCreate() (*models.Erc20Balance, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Erc20Balance), nil
	}
}

func (e erc20BalanceDo) FindByPage(offset int, limit int) (result []*models.Erc20Balance, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e erc20BalanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e erc20BalanceDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e erc20BalanceDo) Delete(models ...*models.Erc20Balance) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *erc20BalanceDo) withDO(do gen.Dao) *erc20BalanceDo {
	e.DO = *do.(*gen.DO)
	return e
}
