// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/berachain/stargazer/wasp/models"
)

func newErc721Balance(db *gorm.DB, opts ...gen.DOOption) erc721Balance {
	_erc721Balance := erc721Balance{}

	_erc721Balance.erc721BalanceDo.UseDB(db, opts...)
	_erc721Balance.erc721BalanceDo.UseModel(&models.Erc721Balance{})

	tableName := _erc721Balance.erc721BalanceDo.TableName()
	_erc721Balance.ALL = field.NewAsterisk(tableName)
	_erc721Balance.ID = field.NewInt64(tableName, "id")
	_erc721Balance.Address = field.NewBytes(tableName, "owner")
	_erc721Balance.ContractAddress = field.NewBytes(tableName, "contract_address")
	_erc721Balance.TokenIds = erc721BalanceHasManyTokenIds{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("TokenIds", "models.Erc721Tokens"),
	}

	_erc721Balance.fillFieldMap()

	return _erc721Balance
}

type erc721Balance struct {
	erc721BalanceDo erc721BalanceDo

	ALL             field.Asterisk
	ID              field.Int64
	Address         field.Bytes
	ContractAddress field.Bytes
	TokenIds        erc721BalanceHasManyTokenIds

	fieldMap map[string]field.Expr
}

func (e erc721Balance) Table(newTableName string) *erc721Balance {
	e.erc721BalanceDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e erc721Balance) As(alias string) *erc721Balance {
	e.erc721BalanceDo.DO = *(e.erc721BalanceDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *erc721Balance) updateTableName(table string) *erc721Balance {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Address = field.NewBytes(table, "owner")
	e.ContractAddress = field.NewBytes(table, "contract_address")

	e.fillFieldMap()

	return e
}

func (e *erc721Balance) WithContext(ctx context.Context) IErc721BalanceDo {
	return e.erc721BalanceDo.WithContext(ctx)
}

func (e erc721Balance) TableName() string { return e.erc721BalanceDo.TableName() }

func (e erc721Balance) Alias() string { return e.erc721BalanceDo.Alias() }

func (e *erc721Balance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *erc721Balance) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 4)
	e.fieldMap["id"] = e.ID
	e.fieldMap["owner"] = e.Address
	e.fieldMap["contract_address"] = e.ContractAddress

}

func (e erc721Balance) clone(db *gorm.DB) erc721Balance {
	e.erc721BalanceDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e erc721Balance) replaceDB(db *gorm.DB) erc721Balance {
	e.erc721BalanceDo.ReplaceDB(db)
	return e
}

type erc721BalanceHasManyTokenIds struct {
	db *gorm.DB

	field.RelationField
}

func (a erc721BalanceHasManyTokenIds) Where(conds ...field.Expr) *erc721BalanceHasManyTokenIds {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a erc721BalanceHasManyTokenIds) WithContext(ctx context.Context) *erc721BalanceHasManyTokenIds {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a erc721BalanceHasManyTokenIds) Model(m *models.Erc721Balance) *erc721BalanceHasManyTokenIdsTx {
	return &erc721BalanceHasManyTokenIdsTx{a.db.Model(m).Association(a.Name())}
}

type erc721BalanceHasManyTokenIdsTx struct{ tx *gorm.Association }

func (a erc721BalanceHasManyTokenIdsTx) Find() (result []*models.Erc721Tokens, err error) {
	return result, a.tx.Find(&result)
}

func (a erc721BalanceHasManyTokenIdsTx) Append(values ...*models.Erc721Tokens) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a erc721BalanceHasManyTokenIdsTx) Replace(values ...*models.Erc721Tokens) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a erc721BalanceHasManyTokenIdsTx) Delete(values ...*models.Erc721Tokens) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a erc721BalanceHasManyTokenIdsTx) Clear() error {
	return a.tx.Clear()
}

func (a erc721BalanceHasManyTokenIdsTx) Count() int64 {
	return a.tx.Count()
}

type erc721BalanceDo struct{ gen.DO }

type IErc721BalanceDo interface {
	gen.SubQuery
	Debug() IErc721BalanceDo
	WithContext(ctx context.Context) IErc721BalanceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IErc721BalanceDo
	WriteDB() IErc721BalanceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IErc721BalanceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IErc721BalanceDo
	Not(conds ...gen.Condition) IErc721BalanceDo
	Or(conds ...gen.Condition) IErc721BalanceDo
	Select(conds ...field.Expr) IErc721BalanceDo
	Where(conds ...gen.Condition) IErc721BalanceDo
	Order(conds ...field.Expr) IErc721BalanceDo
	Distinct(cols ...field.Expr) IErc721BalanceDo
	Omit(cols ...field.Expr) IErc721BalanceDo
	Join(table schema.Tabler, on ...field.Expr) IErc721BalanceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IErc721BalanceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IErc721BalanceDo
	Group(cols ...field.Expr) IErc721BalanceDo
	Having(conds ...gen.Condition) IErc721BalanceDo
	Limit(limit int) IErc721BalanceDo
	Offset(offset int) IErc721BalanceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IErc721BalanceDo
	Unscoped() IErc721BalanceDo
	Create(values ...*models.Erc721Balance) error
	CreateInBatches(values []*models.Erc721Balance, batchSize int) error
	Save(values ...*models.Erc721Balance) error
	First() (*models.Erc721Balance, error)
	Take() (*models.Erc721Balance, error)
	Last() (*models.Erc721Balance, error)
	Find() ([]*models.Erc721Balance, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Erc721Balance, err error)
	FindInBatches(result *[]*models.Erc721Balance, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Erc721Balance) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IErc721BalanceDo
	Assign(attrs ...field.AssignExpr) IErc721BalanceDo
	Joins(fields ...field.RelationField) IErc721BalanceDo
	Preload(fields ...field.RelationField) IErc721BalanceDo
	FirstOrInit() (*models.Erc721Balance, error)
	FirstOrCreate() (*models.Erc721Balance, error)
	FindByPage(offset int, limit int) (result []*models.Erc721Balance, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IErc721BalanceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e erc721BalanceDo) Debug() IErc721BalanceDo {
	return e.withDO(e.DO.Debug())
}

func (e erc721BalanceDo) WithContext(ctx context.Context) IErc721BalanceDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e erc721BalanceDo) ReadDB() IErc721BalanceDo {
	return e.Clauses(dbresolver.Read)
}

func (e erc721BalanceDo) WriteDB() IErc721BalanceDo {
	return e.Clauses(dbresolver.Write)
}

func (e erc721BalanceDo) Session(config *gorm.Session) IErc721BalanceDo {
	return e.withDO(e.DO.Session(config))
}

func (e erc721BalanceDo) Clauses(conds ...clause.Expression) IErc721BalanceDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e erc721BalanceDo) Returning(value interface{}, columns ...string) IErc721BalanceDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e erc721BalanceDo) Not(conds ...gen.Condition) IErc721BalanceDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e erc721BalanceDo) Or(conds ...gen.Condition) IErc721BalanceDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e erc721BalanceDo) Select(conds ...field.Expr) IErc721BalanceDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e erc721BalanceDo) Where(conds ...gen.Condition) IErc721BalanceDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e erc721BalanceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IErc721BalanceDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e erc721BalanceDo) Order(conds ...field.Expr) IErc721BalanceDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e erc721BalanceDo) Distinct(cols ...field.Expr) IErc721BalanceDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e erc721BalanceDo) Omit(cols ...field.Expr) IErc721BalanceDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e erc721BalanceDo) Join(table schema.Tabler, on ...field.Expr) IErc721BalanceDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e erc721BalanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IErc721BalanceDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e erc721BalanceDo) RightJoin(table schema.Tabler, on ...field.Expr) IErc721BalanceDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e erc721BalanceDo) Group(cols ...field.Expr) IErc721BalanceDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e erc721BalanceDo) Having(conds ...gen.Condition) IErc721BalanceDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e erc721BalanceDo) Limit(limit int) IErc721BalanceDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e erc721BalanceDo) Offset(offset int) IErc721BalanceDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e erc721BalanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IErc721BalanceDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e erc721BalanceDo) Unscoped() IErc721BalanceDo {
	return e.withDO(e.DO.Unscoped())
}

func (e erc721BalanceDo) Create(values ...*models.Erc721Balance) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e erc721BalanceDo) CreateInBatches(values []*models.Erc721Balance, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e erc721BalanceDo) Save(values ...*models.Erc721Balance) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e erc721BalanceDo) First() (*models.Erc721Balance, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Erc721Balance), nil
	}
}

func (e erc721BalanceDo) Take() (*models.Erc721Balance, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Erc721Balance), nil
	}
}

func (e erc721BalanceDo) Last() (*models.Erc721Balance, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Erc721Balance), nil
	}
}

func (e erc721BalanceDo) Find() ([]*models.Erc721Balance, error) {
	result, err := e.DO.Find()
	return result.([]*models.Erc721Balance), err
}

func (e erc721BalanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Erc721Balance, err error) {
	buf := make([]*models.Erc721Balance, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e erc721BalanceDo) FindInBatches(result *[]*models.Erc721Balance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e erc721BalanceDo) Attrs(attrs ...field.AssignExpr) IErc721BalanceDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e erc721BalanceDo) Assign(attrs ...field.AssignExpr) IErc721BalanceDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e erc721BalanceDo) Joins(fields ...field.RelationField) IErc721BalanceDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e erc721BalanceDo) Preload(fields ...field.RelationField) IErc721BalanceDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e erc721BalanceDo) FirstOrInit() (*models.Erc721Balance, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Erc721Balance), nil
	}
}

func (e erc721BalanceDo) FirstOrCreate() (*models.Erc721Balance, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Erc721Balance), nil
	}
}

func (e erc721BalanceDo) FindByPage(offset int, limit int) (result []*models.Erc721Balance, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e erc721BalanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e erc721BalanceDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e erc721BalanceDo) Delete(models ...*models.Erc721Balance) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *erc721BalanceDo) withDO(do gen.Dao) *erc721BalanceDo {
	e.DO = *do.(*gen.DO)
	return e
}
