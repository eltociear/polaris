// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/berachain/stargazer/wasp/models"
)

func newErc721Tokens(db *gorm.DB, opts ...gen.DOOption) erc721Tokens {
	_erc721Tokens := erc721Tokens{}

	_erc721Tokens.erc721TokensDo.UseDB(db, opts...)
	_erc721Tokens.erc721TokensDo.UseModel(&models.Erc721Tokens{})

	tableName := _erc721Tokens.erc721TokensDo.TableName()
	_erc721Tokens.ALL = field.NewAsterisk(tableName)
	_erc721Tokens.ID = field.NewInt64(tableName, "id")
	_erc721Tokens.BalanceId = field.NewInt64(tableName, "balance_id")
	_erc721Tokens.TokenId = field.NewInt64(tableName, "token_id")

	_erc721Tokens.fillFieldMap()

	return _erc721Tokens
}

type erc721Tokens struct {
	erc721TokensDo erc721TokensDo

	ALL       field.Asterisk
	ID        field.Int64
	BalanceId field.Int64
	TokenId   field.Int64

	fieldMap map[string]field.Expr
}

func (e erc721Tokens) Table(newTableName string) *erc721Tokens {
	e.erc721TokensDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e erc721Tokens) As(alias string) *erc721Tokens {
	e.erc721TokensDo.DO = *(e.erc721TokensDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *erc721Tokens) updateTableName(table string) *erc721Tokens {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.BalanceId = field.NewInt64(table, "balance_id")
	e.TokenId = field.NewInt64(table, "token_id")

	e.fillFieldMap()

	return e
}

func (e *erc721Tokens) WithContext(ctx context.Context) IErc721TokensDo {
	return e.erc721TokensDo.WithContext(ctx)
}

func (e erc721Tokens) TableName() string { return e.erc721TokensDo.TableName() }

func (e erc721Tokens) Alias() string { return e.erc721TokensDo.Alias() }

func (e *erc721Tokens) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *erc721Tokens) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 3)
	e.fieldMap["id"] = e.ID
	e.fieldMap["balance_id"] = e.BalanceId
	e.fieldMap["token_id"] = e.TokenId
}

func (e erc721Tokens) clone(db *gorm.DB) erc721Tokens {
	e.erc721TokensDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e erc721Tokens) replaceDB(db *gorm.DB) erc721Tokens {
	e.erc721TokensDo.ReplaceDB(db)
	return e
}

type erc721TokensDo struct{ gen.DO }

type IErc721TokensDo interface {
	gen.SubQuery
	Debug() IErc721TokensDo
	WithContext(ctx context.Context) IErc721TokensDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IErc721TokensDo
	WriteDB() IErc721TokensDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IErc721TokensDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IErc721TokensDo
	Not(conds ...gen.Condition) IErc721TokensDo
	Or(conds ...gen.Condition) IErc721TokensDo
	Select(conds ...field.Expr) IErc721TokensDo
	Where(conds ...gen.Condition) IErc721TokensDo
	Order(conds ...field.Expr) IErc721TokensDo
	Distinct(cols ...field.Expr) IErc721TokensDo
	Omit(cols ...field.Expr) IErc721TokensDo
	Join(table schema.Tabler, on ...field.Expr) IErc721TokensDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IErc721TokensDo
	RightJoin(table schema.Tabler, on ...field.Expr) IErc721TokensDo
	Group(cols ...field.Expr) IErc721TokensDo
	Having(conds ...gen.Condition) IErc721TokensDo
	Limit(limit int) IErc721TokensDo
	Offset(offset int) IErc721TokensDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IErc721TokensDo
	Unscoped() IErc721TokensDo
	Create(values ...*models.Erc721Tokens) error
	CreateInBatches(values []*models.Erc721Tokens, batchSize int) error
	Save(values ...*models.Erc721Tokens) error
	First() (*models.Erc721Tokens, error)
	Take() (*models.Erc721Tokens, error)
	Last() (*models.Erc721Tokens, error)
	Find() ([]*models.Erc721Tokens, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Erc721Tokens, err error)
	FindInBatches(result *[]*models.Erc721Tokens, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Erc721Tokens) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IErc721TokensDo
	Assign(attrs ...field.AssignExpr) IErc721TokensDo
	Joins(fields ...field.RelationField) IErc721TokensDo
	Preload(fields ...field.RelationField) IErc721TokensDo
	FirstOrInit() (*models.Erc721Tokens, error)
	FirstOrCreate() (*models.Erc721Tokens, error)
	FindByPage(offset int, limit int) (result []*models.Erc721Tokens, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IErc721TokensDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e erc721TokensDo) Debug() IErc721TokensDo {
	return e.withDO(e.DO.Debug())
}

func (e erc721TokensDo) WithContext(ctx context.Context) IErc721TokensDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e erc721TokensDo) ReadDB() IErc721TokensDo {
	return e.Clauses(dbresolver.Read)
}

func (e erc721TokensDo) WriteDB() IErc721TokensDo {
	return e.Clauses(dbresolver.Write)
}

func (e erc721TokensDo) Session(config *gorm.Session) IErc721TokensDo {
	return e.withDO(e.DO.Session(config))
}

func (e erc721TokensDo) Clauses(conds ...clause.Expression) IErc721TokensDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e erc721TokensDo) Returning(value interface{}, columns ...string) IErc721TokensDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e erc721TokensDo) Not(conds ...gen.Condition) IErc721TokensDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e erc721TokensDo) Or(conds ...gen.Condition) IErc721TokensDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e erc721TokensDo) Select(conds ...field.Expr) IErc721TokensDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e erc721TokensDo) Where(conds ...gen.Condition) IErc721TokensDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e erc721TokensDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IErc721TokensDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e erc721TokensDo) Order(conds ...field.Expr) IErc721TokensDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e erc721TokensDo) Distinct(cols ...field.Expr) IErc721TokensDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e erc721TokensDo) Omit(cols ...field.Expr) IErc721TokensDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e erc721TokensDo) Join(table schema.Tabler, on ...field.Expr) IErc721TokensDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e erc721TokensDo) LeftJoin(table schema.Tabler, on ...field.Expr) IErc721TokensDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e erc721TokensDo) RightJoin(table schema.Tabler, on ...field.Expr) IErc721TokensDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e erc721TokensDo) Group(cols ...field.Expr) IErc721TokensDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e erc721TokensDo) Having(conds ...gen.Condition) IErc721TokensDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e erc721TokensDo) Limit(limit int) IErc721TokensDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e erc721TokensDo) Offset(offset int) IErc721TokensDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e erc721TokensDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IErc721TokensDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e erc721TokensDo) Unscoped() IErc721TokensDo {
	return e.withDO(e.DO.Unscoped())
}

func (e erc721TokensDo) Create(values ...*models.Erc721Tokens) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e erc721TokensDo) CreateInBatches(values []*models.Erc721Tokens, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e erc721TokensDo) Save(values ...*models.Erc721Tokens) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e erc721TokensDo) First() (*models.Erc721Tokens, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Erc721Tokens), nil
	}
}

func (e erc721TokensDo) Take() (*models.Erc721Tokens, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Erc721Tokens), nil
	}
}

func (e erc721TokensDo) Last() (*models.Erc721Tokens, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Erc721Tokens), nil
	}
}

func (e erc721TokensDo) Find() ([]*models.Erc721Tokens, error) {
	result, err := e.DO.Find()
	return result.([]*models.Erc721Tokens), err
}

func (e erc721TokensDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Erc721Tokens, err error) {
	buf := make([]*models.Erc721Tokens, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e erc721TokensDo) FindInBatches(result *[]*models.Erc721Tokens, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e erc721TokensDo) Attrs(attrs ...field.AssignExpr) IErc721TokensDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e erc721TokensDo) Assign(attrs ...field.AssignExpr) IErc721TokensDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e erc721TokensDo) Joins(fields ...field.RelationField) IErc721TokensDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e erc721TokensDo) Preload(fields ...field.RelationField) IErc721TokensDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e erc721TokensDo) FirstOrInit() (*models.Erc721Tokens, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Erc721Tokens), nil
	}
}

func (e erc721TokensDo) FirstOrCreate() (*models.Erc721Tokens, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Erc721Tokens), nil
	}
}

func (e erc721TokensDo) FindByPage(offset int, limit int) (result []*models.Erc721Tokens, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e erc721TokensDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e erc721TokensDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e erc721TokensDo) Delete(models ...*models.Erc721Tokens) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *erc721TokensDo) withDO(do gen.Dao) *erc721TokensDo {
	e.DO = *do.(*gen.DO)
	return e
}
