// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/berachain/stargazer/wasp/models"
)

func newAbi(db *gorm.DB, opts ...gen.DOOption) abi {
	_abi := abi{}

	_abi.abiDo.UseDB(db, opts...)
	_abi.abiDo.UseModel(&models.Abi{})

	tableName := _abi.abiDo.TableName()
	_abi.ALL = field.NewAsterisk(tableName)
	_abi.ID = field.NewInt64(tableName, "id")
	_abi.Abi = field.NewString(tableName, "abi")
	_abi.Tag = field.NewString(tableName, "tag")

	_abi.fillFieldMap()

	return _abi
}

type abi struct {
	abiDo abiDo

	ALL field.Asterisk
	ID  field.Int64
	Abi field.String
	Tag field.String

	fieldMap map[string]field.Expr
}

func (a abi) Table(newTableName string) *abi {
	a.abiDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a abi) As(alias string) *abi {
	a.abiDo.DO = *(a.abiDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *abi) updateTableName(table string) *abi {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Abi = field.NewString(table, "abi")
	a.Tag = field.NewString(table, "tag")

	a.fillFieldMap()

	return a
}

func (a *abi) WithContext(ctx context.Context) IAbiDo { return a.abiDo.WithContext(ctx) }

func (a abi) TableName() string { return a.abiDo.TableName() }

func (a abi) Alias() string { return a.abiDo.Alias() }

func (a *abi) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *abi) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 3)
	a.fieldMap["id"] = a.ID
	a.fieldMap["abi"] = a.Abi
	a.fieldMap["tag"] = a.Tag
}

func (a abi) clone(db *gorm.DB) abi {
	a.abiDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a abi) replaceDB(db *gorm.DB) abi {
	a.abiDo.ReplaceDB(db)
	return a
}

type abiDo struct{ gen.DO }

type IAbiDo interface {
	gen.SubQuery
	Debug() IAbiDo
	WithContext(ctx context.Context) IAbiDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAbiDo
	WriteDB() IAbiDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAbiDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAbiDo
	Not(conds ...gen.Condition) IAbiDo
	Or(conds ...gen.Condition) IAbiDo
	Select(conds ...field.Expr) IAbiDo
	Where(conds ...gen.Condition) IAbiDo
	Order(conds ...field.Expr) IAbiDo
	Distinct(cols ...field.Expr) IAbiDo
	Omit(cols ...field.Expr) IAbiDo
	Join(table schema.Tabler, on ...field.Expr) IAbiDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAbiDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAbiDo
	Group(cols ...field.Expr) IAbiDo
	Having(conds ...gen.Condition) IAbiDo
	Limit(limit int) IAbiDo
	Offset(offset int) IAbiDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAbiDo
	Unscoped() IAbiDo
	Create(values ...*models.Abi) error
	CreateInBatches(values []*models.Abi, batchSize int) error
	Save(values ...*models.Abi) error
	First() (*models.Abi, error)
	Take() (*models.Abi, error)
	Last() (*models.Abi, error)
	Find() ([]*models.Abi, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Abi, err error)
	FindInBatches(result *[]*models.Abi, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Abi) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAbiDo
	Assign(attrs ...field.AssignExpr) IAbiDo
	Joins(fields ...field.RelationField) IAbiDo
	Preload(fields ...field.RelationField) IAbiDo
	FirstOrInit() (*models.Abi, error)
	FirstOrCreate() (*models.Abi, error)
	FindByPage(offset int, limit int) (result []*models.Abi, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAbiDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a abiDo) Debug() IAbiDo {
	return a.withDO(a.DO.Debug())
}

func (a abiDo) WithContext(ctx context.Context) IAbiDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a abiDo) ReadDB() IAbiDo {
	return a.Clauses(dbresolver.Read)
}

func (a abiDo) WriteDB() IAbiDo {
	return a.Clauses(dbresolver.Write)
}

func (a abiDo) Session(config *gorm.Session) IAbiDo {
	return a.withDO(a.DO.Session(config))
}

func (a abiDo) Clauses(conds ...clause.Expression) IAbiDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a abiDo) Returning(value interface{}, columns ...string) IAbiDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a abiDo) Not(conds ...gen.Condition) IAbiDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a abiDo) Or(conds ...gen.Condition) IAbiDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a abiDo) Select(conds ...field.Expr) IAbiDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a abiDo) Where(conds ...gen.Condition) IAbiDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a abiDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAbiDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a abiDo) Order(conds ...field.Expr) IAbiDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a abiDo) Distinct(cols ...field.Expr) IAbiDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a abiDo) Omit(cols ...field.Expr) IAbiDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a abiDo) Join(table schema.Tabler, on ...field.Expr) IAbiDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a abiDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAbiDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a abiDo) RightJoin(table schema.Tabler, on ...field.Expr) IAbiDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a abiDo) Group(cols ...field.Expr) IAbiDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a abiDo) Having(conds ...gen.Condition) IAbiDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a abiDo) Limit(limit int) IAbiDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a abiDo) Offset(offset int) IAbiDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a abiDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAbiDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a abiDo) Unscoped() IAbiDo {
	return a.withDO(a.DO.Unscoped())
}

func (a abiDo) Create(values ...*models.Abi) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a abiDo) CreateInBatches(values []*models.Abi, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a abiDo) Save(values ...*models.Abi) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a abiDo) First() (*models.Abi, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Abi), nil
	}
}

func (a abiDo) Take() (*models.Abi, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Abi), nil
	}
}

func (a abiDo) Last() (*models.Abi, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Abi), nil
	}
}

func (a abiDo) Find() ([]*models.Abi, error) {
	result, err := a.DO.Find()
	return result.([]*models.Abi), err
}

func (a abiDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Abi, err error) {
	buf := make([]*models.Abi, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a abiDo) FindInBatches(result *[]*models.Abi, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a abiDo) Attrs(attrs ...field.AssignExpr) IAbiDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a abiDo) Assign(attrs ...field.AssignExpr) IAbiDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a abiDo) Joins(fields ...field.RelationField) IAbiDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a abiDo) Preload(fields ...field.RelationField) IAbiDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a abiDo) FirstOrInit() (*models.Abi, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Abi), nil
	}
}

func (a abiDo) FirstOrCreate() (*models.Abi, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Abi), nil
	}
}

func (a abiDo) FindByPage(offset int, limit int) (result []*models.Abi, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a abiDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a abiDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a abiDo) Delete(models ...*models.Abi) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *abiDo) withDO(do gen.Dao) *abiDo {
	a.DO = *do.(*gen.DO)
	return a
}
