// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/berachain/stargazer/wasp/models"
)

func newEthTxnReceipt(db *gorm.DB, opts ...gen.DOOption) ethTxnReceipt {
	_ethTxnReceipt := ethTxnReceipt{}

	_ethTxnReceipt.ethTxnReceiptDo.UseDB(db, opts...)
	_ethTxnReceipt.ethTxnReceiptDo.UseModel(&models.EthTxnReceipt{})

	tableName := _ethTxnReceipt.ethTxnReceiptDo.TableName()
	_ethTxnReceipt.ALL = field.NewAsterisk(tableName)
	_ethTxnReceipt.ID = field.NewInt64(tableName, "id")
	_ethTxnReceipt.Type = field.NewUint8(tableName, "type")
	_ethTxnReceipt.PostState = field.NewBytes(tableName, "post_state")
	_ethTxnReceipt.Status = field.NewUint64(tableName, "status")
	_ethTxnReceipt.CumulativeGasUsed = field.NewUint64(tableName, "cumulative_gas_used")
	_ethTxnReceipt.Bloom = field.NewBytes(tableName, "bloom")
	_ethTxnReceipt.TxHash = field.NewBytes(tableName, "tx_hash")
	_ethTxnReceipt.ContractAddress = field.NewBytes(tableName, "contract_address")
	_ethTxnReceipt.GasUsed = field.NewUint64(tableName, "gas_used")
	_ethTxnReceipt.BlockHash = field.NewBytes(tableName, "block_hash")
	_ethTxnReceipt.BlockNumber = field.NewString(tableName, "block_number")
	_ethTxnReceipt.TransactionIndex = field.NewUint(tableName, "transaction_index")
	_ethTxnReceipt.Logs = ethTxnReceiptHasManyLogs{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Logs", "models.EthLog"),
	}

	_ethTxnReceipt.fillFieldMap()

	return _ethTxnReceipt
}

type ethTxnReceipt struct {
	ethTxnReceiptDo ethTxnReceiptDo

	ALL               field.Asterisk
	ID                field.Int64
	Type              field.Uint8
	PostState         field.Bytes
	Status            field.Uint64
	CumulativeGasUsed field.Uint64
	Bloom             field.Bytes
	TxHash            field.Bytes
	ContractAddress   field.Bytes
	GasUsed           field.Uint64
	BlockHash         field.Bytes
	BlockNumber       field.String
	TransactionIndex  field.Uint
	Logs              ethTxnReceiptHasManyLogs

	fieldMap map[string]field.Expr
}

func (e ethTxnReceipt) Table(newTableName string) *ethTxnReceipt {
	e.ethTxnReceiptDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ethTxnReceipt) As(alias string) *ethTxnReceipt {
	e.ethTxnReceiptDo.DO = *(e.ethTxnReceiptDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ethTxnReceipt) updateTableName(table string) *ethTxnReceipt {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Type = field.NewUint8(table, "type")
	e.PostState = field.NewBytes(table, "post_state")
	e.Status = field.NewUint64(table, "status")
	e.CumulativeGasUsed = field.NewUint64(table, "cumulative_gas_used")
	e.Bloom = field.NewBytes(table, "bloom")
	e.TxHash = field.NewBytes(table, "tx_hash")
	e.ContractAddress = field.NewBytes(table, "contract_address")
	e.GasUsed = field.NewUint64(table, "gas_used")
	e.BlockHash = field.NewBytes(table, "block_hash")
	e.BlockNumber = field.NewString(table, "block_number")
	e.TransactionIndex = field.NewUint(table, "transaction_index")

	e.fillFieldMap()

	return e
}

func (e *ethTxnReceipt) WithContext(ctx context.Context) IEthTxnReceiptDo {
	return e.ethTxnReceiptDo.WithContext(ctx)
}

func (e ethTxnReceipt) TableName() string { return e.ethTxnReceiptDo.TableName() }

func (e ethTxnReceipt) Alias() string { return e.ethTxnReceiptDo.Alias() }

func (e *ethTxnReceipt) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ethTxnReceipt) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 13)
	e.fieldMap["id"] = e.ID
	e.fieldMap["type"] = e.Type
	e.fieldMap["post_state"] = e.PostState
	e.fieldMap["status"] = e.Status
	e.fieldMap["cumulative_gas_used"] = e.CumulativeGasUsed
	e.fieldMap["bloom"] = e.Bloom
	e.fieldMap["tx_hash"] = e.TxHash
	e.fieldMap["contract_address"] = e.ContractAddress
	e.fieldMap["gas_used"] = e.GasUsed
	e.fieldMap["block_hash"] = e.BlockHash
	e.fieldMap["block_number"] = e.BlockNumber
	e.fieldMap["transaction_index"] = e.TransactionIndex

}

func (e ethTxnReceipt) clone(db *gorm.DB) ethTxnReceipt {
	e.ethTxnReceiptDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ethTxnReceipt) replaceDB(db *gorm.DB) ethTxnReceipt {
	e.ethTxnReceiptDo.ReplaceDB(db)
	return e
}

type ethTxnReceiptHasManyLogs struct {
	db *gorm.DB

	field.RelationField
}

func (a ethTxnReceiptHasManyLogs) Where(conds ...field.Expr) *ethTxnReceiptHasManyLogs {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a ethTxnReceiptHasManyLogs) WithContext(ctx context.Context) *ethTxnReceiptHasManyLogs {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a ethTxnReceiptHasManyLogs) Model(m *models.EthTxnReceipt) *ethTxnReceiptHasManyLogsTx {
	return &ethTxnReceiptHasManyLogsTx{a.db.Model(m).Association(a.Name())}
}

type ethTxnReceiptHasManyLogsTx struct{ tx *gorm.Association }

func (a ethTxnReceiptHasManyLogsTx) Find() (result []*models.EthLog, err error) {
	return result, a.tx.Find(&result)
}

func (a ethTxnReceiptHasManyLogsTx) Append(values ...*models.EthLog) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a ethTxnReceiptHasManyLogsTx) Replace(values ...*models.EthLog) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a ethTxnReceiptHasManyLogsTx) Delete(values ...*models.EthLog) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a ethTxnReceiptHasManyLogsTx) Clear() error {
	return a.tx.Clear()
}

func (a ethTxnReceiptHasManyLogsTx) Count() int64 {
	return a.tx.Count()
}

type ethTxnReceiptDo struct{ gen.DO }

type IEthTxnReceiptDo interface {
	gen.SubQuery
	Debug() IEthTxnReceiptDo
	WithContext(ctx context.Context) IEthTxnReceiptDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEthTxnReceiptDo
	WriteDB() IEthTxnReceiptDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEthTxnReceiptDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEthTxnReceiptDo
	Not(conds ...gen.Condition) IEthTxnReceiptDo
	Or(conds ...gen.Condition) IEthTxnReceiptDo
	Select(conds ...field.Expr) IEthTxnReceiptDo
	Where(conds ...gen.Condition) IEthTxnReceiptDo
	Order(conds ...field.Expr) IEthTxnReceiptDo
	Distinct(cols ...field.Expr) IEthTxnReceiptDo
	Omit(cols ...field.Expr) IEthTxnReceiptDo
	Join(table schema.Tabler, on ...field.Expr) IEthTxnReceiptDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEthTxnReceiptDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEthTxnReceiptDo
	Group(cols ...field.Expr) IEthTxnReceiptDo
	Having(conds ...gen.Condition) IEthTxnReceiptDo
	Limit(limit int) IEthTxnReceiptDo
	Offset(offset int) IEthTxnReceiptDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEthTxnReceiptDo
	Unscoped() IEthTxnReceiptDo
	Create(values ...*models.EthTxnReceipt) error
	CreateInBatches(values []*models.EthTxnReceipt, batchSize int) error
	Save(values ...*models.EthTxnReceipt) error
	First() (*models.EthTxnReceipt, error)
	Take() (*models.EthTxnReceipt, error)
	Last() (*models.EthTxnReceipt, error)
	Find() ([]*models.EthTxnReceipt, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.EthTxnReceipt, err error)
	FindInBatches(result *[]*models.EthTxnReceipt, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.EthTxnReceipt) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEthTxnReceiptDo
	Assign(attrs ...field.AssignExpr) IEthTxnReceiptDo
	Joins(fields ...field.RelationField) IEthTxnReceiptDo
	Preload(fields ...field.RelationField) IEthTxnReceiptDo
	FirstOrInit() (*models.EthTxnReceipt, error)
	FirstOrCreate() (*models.EthTxnReceipt, error)
	FindByPage(offset int, limit int) (result []*models.EthTxnReceipt, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEthTxnReceiptDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ethTxnReceiptDo) Debug() IEthTxnReceiptDo {
	return e.withDO(e.DO.Debug())
}

func (e ethTxnReceiptDo) WithContext(ctx context.Context) IEthTxnReceiptDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ethTxnReceiptDo) ReadDB() IEthTxnReceiptDo {
	return e.Clauses(dbresolver.Read)
}

func (e ethTxnReceiptDo) WriteDB() IEthTxnReceiptDo {
	return e.Clauses(dbresolver.Write)
}

func (e ethTxnReceiptDo) Session(config *gorm.Session) IEthTxnReceiptDo {
	return e.withDO(e.DO.Session(config))
}

func (e ethTxnReceiptDo) Clauses(conds ...clause.Expression) IEthTxnReceiptDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ethTxnReceiptDo) Returning(value interface{}, columns ...string) IEthTxnReceiptDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ethTxnReceiptDo) Not(conds ...gen.Condition) IEthTxnReceiptDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ethTxnReceiptDo) Or(conds ...gen.Condition) IEthTxnReceiptDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ethTxnReceiptDo) Select(conds ...field.Expr) IEthTxnReceiptDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ethTxnReceiptDo) Where(conds ...gen.Condition) IEthTxnReceiptDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ethTxnReceiptDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IEthTxnReceiptDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e ethTxnReceiptDo) Order(conds ...field.Expr) IEthTxnReceiptDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ethTxnReceiptDo) Distinct(cols ...field.Expr) IEthTxnReceiptDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ethTxnReceiptDo) Omit(cols ...field.Expr) IEthTxnReceiptDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ethTxnReceiptDo) Join(table schema.Tabler, on ...field.Expr) IEthTxnReceiptDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ethTxnReceiptDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEthTxnReceiptDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ethTxnReceiptDo) RightJoin(table schema.Tabler, on ...field.Expr) IEthTxnReceiptDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ethTxnReceiptDo) Group(cols ...field.Expr) IEthTxnReceiptDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ethTxnReceiptDo) Having(conds ...gen.Condition) IEthTxnReceiptDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ethTxnReceiptDo) Limit(limit int) IEthTxnReceiptDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ethTxnReceiptDo) Offset(offset int) IEthTxnReceiptDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ethTxnReceiptDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEthTxnReceiptDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ethTxnReceiptDo) Unscoped() IEthTxnReceiptDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ethTxnReceiptDo) Create(values ...*models.EthTxnReceipt) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ethTxnReceiptDo) CreateInBatches(values []*models.EthTxnReceipt, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ethTxnReceiptDo) Save(values ...*models.EthTxnReceipt) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ethTxnReceiptDo) First() (*models.EthTxnReceipt, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.EthTxnReceipt), nil
	}
}

func (e ethTxnReceiptDo) Take() (*models.EthTxnReceipt, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.EthTxnReceipt), nil
	}
}

func (e ethTxnReceiptDo) Last() (*models.EthTxnReceipt, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.EthTxnReceipt), nil
	}
}

func (e ethTxnReceiptDo) Find() ([]*models.EthTxnReceipt, error) {
	result, err := e.DO.Find()
	return result.([]*models.EthTxnReceipt), err
}

func (e ethTxnReceiptDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.EthTxnReceipt, err error) {
	buf := make([]*models.EthTxnReceipt, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ethTxnReceiptDo) FindInBatches(result *[]*models.EthTxnReceipt, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ethTxnReceiptDo) Attrs(attrs ...field.AssignExpr) IEthTxnReceiptDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ethTxnReceiptDo) Assign(attrs ...field.AssignExpr) IEthTxnReceiptDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ethTxnReceiptDo) Joins(fields ...field.RelationField) IEthTxnReceiptDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ethTxnReceiptDo) Preload(fields ...field.RelationField) IEthTxnReceiptDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ethTxnReceiptDo) FirstOrInit() (*models.EthTxnReceipt, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.EthTxnReceipt), nil
	}
}

func (e ethTxnReceiptDo) FirstOrCreate() (*models.EthTxnReceipt, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.EthTxnReceipt), nil
	}
}

func (e ethTxnReceiptDo) FindByPage(offset int, limit int) (result []*models.EthTxnReceipt, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ethTxnReceiptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ethTxnReceiptDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ethTxnReceiptDo) Delete(models ...*models.EthTxnReceipt) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ethTxnReceiptDo) withDO(do gen.Dao) *ethTxnReceiptDo {
	e.DO = *do.(*gen.DO)
	return e
}
