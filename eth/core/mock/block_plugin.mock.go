// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	sdk "github.com/cosmos/cosmos-sdk/types"
	"github.com/ethereum/go-ethereum/common"
	ethereumcoretypes "github.com/ethereum/go-ethereum/core/types"
	"math/big"
	"pkg.berachain.dev/stargazer/eth/core"
	ethcoretypes "pkg.berachain.dev/stargazer/eth/core/types"
	"sync"
)

// Ensure, that BlockPluginMock does implement core.BlockPlugin.
// If this is not the case, regenerate this file with moq.
var _ core.BlockPlugin = &BlockPluginMock{}

// BlockPluginMock is a mock implementation of core.BlockPlugin.
//
//	func TestSomethingThatUsesBlockPlugin(t *testing.T) {
//
//		// make and configure a mocked core.BlockPlugin
//		mockedBlockPlugin := &BlockPluginMock{
//			BaseFeeFunc: func() uint64 {
//				panic("mock out the BaseFee method")
//			},
//			GetStargazerBlockByHashFunc: func(hash common.Hash) *ethcoretypes.StargazerBlock {
//				panic("mock out the GetStargazerBlockByHash method")
//			},
//			GetStargazerBlockByNumberFunc: func(n int64) *ethcoretypes.StargazerBlock {
//				panic("mock out the GetStargazerBlockByNumber method")
//			},
//			GetStargazerHeaderFunc: func(ctx sdk.Context, height int64) (*ethereumcoretypes.Header, bool) {
//				panic("mock out the GetStargazerHeader method")
//			},
//			GetStargazerHeaderByNumberFunc: func(n int64) *ethereumcoretypes.Header {
//				panic("mock out the GetStargazerHeaderByNumber method")
//			},
//			GetTransactionBlockNumberFunc: func(hash common.Hash) *big.Int {
//				panic("mock out the GetTransactionBlockNumber method")
//			},
//			GetTransactionByHashFunc: func(hash common.Hash) *ethereumcoretypes.Transaction {
//				panic("mock out the GetTransactionByHash method")
//			},
//			PrepareFunc: func(contextMoqParam context.Context)  {
//				panic("mock out the Prepare method")
//			},
//			PruneStargazerHeaderFunc: func(ctx sdk.Context, header *ethereumcoretypes.Header) error {
//				panic("mock out the PruneStargazerHeader method")
//			},
//			SetStargazerHeaderFunc: func(ctx sdk.Context, header *ethereumcoretypes.Header) error {
//				panic("mock out the SetStargazerHeader method")
//			},
//			TrackHistoricalStargazerHeaderFunc: func(ctx sdk.Context, header *ethereumcoretypes.Header)  {
//				panic("mock out the TrackHistoricalStargazerHeader method")
//			},
//		}
//
//		// use mockedBlockPlugin in code that requires core.BlockPlugin
//		// and then make assertions.
//
//	}
type BlockPluginMock struct {
	// BaseFeeFunc mocks the BaseFee method.
	BaseFeeFunc func() uint64

	// GetStargazerBlockByHashFunc mocks the GetStargazerBlockByHash method.
	GetStargazerBlockByHashFunc func(hash common.Hash) *ethcoretypes.StargazerBlock

	// GetStargazerBlockByNumberFunc mocks the GetStargazerBlockByNumber method.
	GetStargazerBlockByNumberFunc func(n int64) *ethcoretypes.StargazerBlock

	// GetStargazerHeaderFunc mocks the GetStargazerHeader method.
	GetStargazerHeaderFunc func(ctx sdk.Context, height int64) (*ethereumcoretypes.Header, bool)

	// GetStargazerHeaderByNumberFunc mocks the GetStargazerHeaderByNumber method.
	GetStargazerHeaderByNumberFunc func(n int64) *ethereumcoretypes.Header

	// GetTransactionBlockNumberFunc mocks the GetTransactionBlockNumber method.
	GetTransactionBlockNumberFunc func(hash common.Hash) *big.Int

	// GetTransactionByHashFunc mocks the GetTransactionByHash method.
	GetTransactionByHashFunc func(hash common.Hash) *ethereumcoretypes.Transaction

	// PrepareFunc mocks the Prepare method.
	PrepareFunc func(contextMoqParam context.Context)

	// PruneStargazerHeaderFunc mocks the PruneStargazerHeader method.
	PruneStargazerHeaderFunc func(ctx sdk.Context, header *ethereumcoretypes.Header) error

	// SetStargazerHeaderFunc mocks the SetStargazerHeader method.
	SetStargazerHeaderFunc func(ctx sdk.Context, header *ethereumcoretypes.Header) error

	// TrackHistoricalStargazerHeaderFunc mocks the TrackHistoricalStargazerHeader method.
	TrackHistoricalStargazerHeaderFunc func(ctx sdk.Context, header *ethereumcoretypes.Header)

	// calls tracks calls to the methods.
	calls struct {
		// BaseFee holds details about calls to the BaseFee method.
		BaseFee []struct {
		}
		// GetStargazerBlockByHash holds details about calls to the GetStargazerBlockByHash method.
		GetStargazerBlockByHash []struct {
			// Hash is the hash argument value.
			Hash common.Hash
		}
		// GetStargazerBlockByNumber holds details about calls to the GetStargazerBlockByNumber method.
		GetStargazerBlockByNumber []struct {
			// N is the n argument value.
			N int64
		}
		// GetStargazerHeader holds details about calls to the GetStargazerHeader method.
		GetStargazerHeader []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Height is the height argument value.
			Height int64
		}
		// GetStargazerHeaderByNumber holds details about calls to the GetStargazerHeaderByNumber method.
		GetStargazerHeaderByNumber []struct {
			// N is the n argument value.
			N int64
		}
		// GetTransactionBlockNumber holds details about calls to the GetTransactionBlockNumber method.
		GetTransactionBlockNumber []struct {
			// Hash is the hash argument value.
			Hash common.Hash
		}
		// GetTransactionByHash holds details about calls to the GetTransactionByHash method.
		GetTransactionByHash []struct {
			// Hash is the hash argument value.
			Hash common.Hash
		}
		// Prepare holds details about calls to the Prepare method.
		Prepare []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// PruneStargazerHeader holds details about calls to the PruneStargazerHeader method.
		PruneStargazerHeader []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Header is the header argument value.
			Header *ethereumcoretypes.Header
		}
		// SetStargazerHeader holds details about calls to the SetStargazerHeader method.
		SetStargazerHeader []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Header is the header argument value.
			Header *ethereumcoretypes.Header
		}
		// TrackHistoricalStargazerHeader holds details about calls to the TrackHistoricalStargazerHeader method.
		TrackHistoricalStargazerHeader []struct {
			// Ctx is the ctx argument value.
			Ctx sdk.Context
			// Header is the header argument value.
			Header *ethereumcoretypes.Header
		}
	}
	lockBaseFee                        sync.RWMutex
	lockGetStargazerBlockByHash        sync.RWMutex
	lockGetStargazerBlockByNumber      sync.RWMutex
	lockGetStargazerHeader             sync.RWMutex
	lockGetStargazerHeaderByNumber     sync.RWMutex
	lockGetTransactionBlockNumber      sync.RWMutex
	lockGetTransactionByHash           sync.RWMutex
	lockPrepare                        sync.RWMutex
	lockPruneStargazerHeader           sync.RWMutex
	lockSetStargazerHeader             sync.RWMutex
	lockTrackHistoricalStargazerHeader sync.RWMutex
}

// BaseFee calls BaseFeeFunc.
func (mock *BlockPluginMock) BaseFee() uint64 {
	if mock.BaseFeeFunc == nil {
		panic("BlockPluginMock.BaseFeeFunc: method is nil but BlockPlugin.BaseFee was just called")
	}
	callInfo := struct {
	}{}
	mock.lockBaseFee.Lock()
	mock.calls.BaseFee = append(mock.calls.BaseFee, callInfo)
	mock.lockBaseFee.Unlock()
	return mock.BaseFeeFunc()
}

// BaseFeeCalls gets all the calls that were made to BaseFee.
// Check the length with:
//
//	len(mockedBlockPlugin.BaseFeeCalls())
func (mock *BlockPluginMock) BaseFeeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBaseFee.RLock()
	calls = mock.calls.BaseFee
	mock.lockBaseFee.RUnlock()
	return calls
}

// GetStargazerBlockByHash calls GetStargazerBlockByHashFunc.
func (mock *BlockPluginMock) GetStargazerBlockByHash(hash common.Hash) *ethcoretypes.StargazerBlock {
	if mock.GetStargazerBlockByHashFunc == nil {
		panic("BlockPluginMock.GetStargazerBlockByHashFunc: method is nil but BlockPlugin.GetStargazerBlockByHash was just called")
	}
	callInfo := struct {
		Hash common.Hash
	}{
		Hash: hash,
	}
	mock.lockGetStargazerBlockByHash.Lock()
	mock.calls.GetStargazerBlockByHash = append(mock.calls.GetStargazerBlockByHash, callInfo)
	mock.lockGetStargazerBlockByHash.Unlock()
	return mock.GetStargazerBlockByHashFunc(hash)
}

// GetStargazerBlockByHashCalls gets all the calls that were made to GetStargazerBlockByHash.
// Check the length with:
//
//	len(mockedBlockPlugin.GetStargazerBlockByHashCalls())
func (mock *BlockPluginMock) GetStargazerBlockByHashCalls() []struct {
	Hash common.Hash
} {
	var calls []struct {
		Hash common.Hash
	}
	mock.lockGetStargazerBlockByHash.RLock()
	calls = mock.calls.GetStargazerBlockByHash
	mock.lockGetStargazerBlockByHash.RUnlock()
	return calls
}

// GetStargazerBlockByNumber calls GetStargazerBlockByNumberFunc.
func (mock *BlockPluginMock) GetStargazerBlockByNumber(n int64) *ethcoretypes.StargazerBlock {
	if mock.GetStargazerBlockByNumberFunc == nil {
		panic("BlockPluginMock.GetStargazerBlockByNumberFunc: method is nil but BlockPlugin.GetStargazerBlockByNumber was just called")
	}
	callInfo := struct {
		N int64
	}{
		N: n,
	}
	mock.lockGetStargazerBlockByNumber.Lock()
	mock.calls.GetStargazerBlockByNumber = append(mock.calls.GetStargazerBlockByNumber, callInfo)
	mock.lockGetStargazerBlockByNumber.Unlock()
	return mock.GetStargazerBlockByNumberFunc(n)
}

// GetStargazerBlockByNumberCalls gets all the calls that were made to GetStargazerBlockByNumber.
// Check the length with:
//
//	len(mockedBlockPlugin.GetStargazerBlockByNumberCalls())
func (mock *BlockPluginMock) GetStargazerBlockByNumberCalls() []struct {
	N int64
} {
	var calls []struct {
		N int64
	}
	mock.lockGetStargazerBlockByNumber.RLock()
	calls = mock.calls.GetStargazerBlockByNumber
	mock.lockGetStargazerBlockByNumber.RUnlock()
	return calls
}

// GetStargazerHeader calls GetStargazerHeaderFunc.
func (mock *BlockPluginMock) GetStargazerHeader(ctx sdk.Context, height int64) (*ethereumcoretypes.Header, bool) {
	if mock.GetStargazerHeaderFunc == nil {
		panic("BlockPluginMock.GetStargazerHeaderFunc: method is nil but BlockPlugin.GetStargazerHeader was just called")
	}
	callInfo := struct {
		Ctx    sdk.Context
		Height int64
	}{
		Ctx:    ctx,
		Height: height,
	}
	mock.lockGetStargazerHeader.Lock()
	mock.calls.GetStargazerHeader = append(mock.calls.GetStargazerHeader, callInfo)
	mock.lockGetStargazerHeader.Unlock()
	return mock.GetStargazerHeaderFunc(ctx, height)
}

// GetStargazerHeaderCalls gets all the calls that were made to GetStargazerHeader.
// Check the length with:
//
//	len(mockedBlockPlugin.GetStargazerHeaderCalls())
func (mock *BlockPluginMock) GetStargazerHeaderCalls() []struct {
	Ctx    sdk.Context
	Height int64
} {
	var calls []struct {
		Ctx    sdk.Context
		Height int64
	}
	mock.lockGetStargazerHeader.RLock()
	calls = mock.calls.GetStargazerHeader
	mock.lockGetStargazerHeader.RUnlock()
	return calls
}

// GetStargazerHeaderByNumber calls GetStargazerHeaderByNumberFunc.
func (mock *BlockPluginMock) GetStargazerHeaderByNumber(n int64) *ethereumcoretypes.Header {
	if mock.GetStargazerHeaderByNumberFunc == nil {
		panic("BlockPluginMock.GetStargazerHeaderByNumberFunc: method is nil but BlockPlugin.GetStargazerHeaderByNumber was just called")
	}
	callInfo := struct {
		N int64
	}{
		N: n,
	}
	mock.lockGetStargazerHeaderByNumber.Lock()
	mock.calls.GetStargazerHeaderByNumber = append(mock.calls.GetStargazerHeaderByNumber, callInfo)
	mock.lockGetStargazerHeaderByNumber.Unlock()
	return mock.GetStargazerHeaderByNumberFunc(n)
}

// GetStargazerHeaderByNumberCalls gets all the calls that were made to GetStargazerHeaderByNumber.
// Check the length with:
//
//	len(mockedBlockPlugin.GetStargazerHeaderByNumberCalls())
func (mock *BlockPluginMock) GetStargazerHeaderByNumberCalls() []struct {
	N int64
} {
	var calls []struct {
		N int64
	}
	mock.lockGetStargazerHeaderByNumber.RLock()
	calls = mock.calls.GetStargazerHeaderByNumber
	mock.lockGetStargazerHeaderByNumber.RUnlock()
	return calls
}

// GetTransactionBlockNumber calls GetTransactionBlockNumberFunc.
func (mock *BlockPluginMock) GetTransactionBlockNumber(hash common.Hash) *big.Int {
	if mock.GetTransactionBlockNumberFunc == nil {
		panic("BlockPluginMock.GetTransactionBlockNumberFunc: method is nil but BlockPlugin.GetTransactionBlockNumber was just called")
	}
	callInfo := struct {
		Hash common.Hash
	}{
		Hash: hash,
	}
	mock.lockGetTransactionBlockNumber.Lock()
	mock.calls.GetTransactionBlockNumber = append(mock.calls.GetTransactionBlockNumber, callInfo)
	mock.lockGetTransactionBlockNumber.Unlock()
	return mock.GetTransactionBlockNumberFunc(hash)
}

// GetTransactionBlockNumberCalls gets all the calls that were made to GetTransactionBlockNumber.
// Check the length with:
//
//	len(mockedBlockPlugin.GetTransactionBlockNumberCalls())
func (mock *BlockPluginMock) GetTransactionBlockNumberCalls() []struct {
	Hash common.Hash
} {
	var calls []struct {
		Hash common.Hash
	}
	mock.lockGetTransactionBlockNumber.RLock()
	calls = mock.calls.GetTransactionBlockNumber
	mock.lockGetTransactionBlockNumber.RUnlock()
	return calls
}

// GetTransactionByHash calls GetTransactionByHashFunc.
func (mock *BlockPluginMock) GetTransactionByHash(hash common.Hash) *ethereumcoretypes.Transaction {
	if mock.GetTransactionByHashFunc == nil {
		panic("BlockPluginMock.GetTransactionByHashFunc: method is nil but BlockPlugin.GetTransactionByHash was just called")
	}
	callInfo := struct {
		Hash common.Hash
	}{
		Hash: hash,
	}
	mock.lockGetTransactionByHash.Lock()
	mock.calls.GetTransactionByHash = append(mock.calls.GetTransactionByHash, callInfo)
	mock.lockGetTransactionByHash.Unlock()
	return mock.GetTransactionByHashFunc(hash)
}

// GetTransactionByHashCalls gets all the calls that were made to GetTransactionByHash.
// Check the length with:
//
//	len(mockedBlockPlugin.GetTransactionByHashCalls())
func (mock *BlockPluginMock) GetTransactionByHashCalls() []struct {
	Hash common.Hash
} {
	var calls []struct {
		Hash common.Hash
	}
	mock.lockGetTransactionByHash.RLock()
	calls = mock.calls.GetTransactionByHash
	mock.lockGetTransactionByHash.RUnlock()
	return calls
}

// Prepare calls PrepareFunc.
func (mock *BlockPluginMock) Prepare(contextMoqParam context.Context) {
	if mock.PrepareFunc == nil {
		panic("BlockPluginMock.PrepareFunc: method is nil but BlockPlugin.Prepare was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockPrepare.Lock()
	mock.calls.Prepare = append(mock.calls.Prepare, callInfo)
	mock.lockPrepare.Unlock()
	mock.PrepareFunc(contextMoqParam)
}

// PrepareCalls gets all the calls that were made to Prepare.
// Check the length with:
//
//	len(mockedBlockPlugin.PrepareCalls())
func (mock *BlockPluginMock) PrepareCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockPrepare.RLock()
	calls = mock.calls.Prepare
	mock.lockPrepare.RUnlock()
	return calls
}

// PruneStargazerHeader calls PruneStargazerHeaderFunc.
func (mock *BlockPluginMock) PruneStargazerHeader(ctx sdk.Context, header *ethereumcoretypes.Header) error {
	if mock.PruneStargazerHeaderFunc == nil {
		panic("BlockPluginMock.PruneStargazerHeaderFunc: method is nil but BlockPlugin.PruneStargazerHeader was just called")
	}
	callInfo := struct {
		Ctx    sdk.Context
		Header *ethereumcoretypes.Header
	}{
		Ctx:    ctx,
		Header: header,
	}
	mock.lockPruneStargazerHeader.Lock()
	mock.calls.PruneStargazerHeader = append(mock.calls.PruneStargazerHeader, callInfo)
	mock.lockPruneStargazerHeader.Unlock()
	return mock.PruneStargazerHeaderFunc(ctx, header)
}

// PruneStargazerHeaderCalls gets all the calls that were made to PruneStargazerHeader.
// Check the length with:
//
//	len(mockedBlockPlugin.PruneStargazerHeaderCalls())
func (mock *BlockPluginMock) PruneStargazerHeaderCalls() []struct {
	Ctx    sdk.Context
	Header *ethereumcoretypes.Header
} {
	var calls []struct {
		Ctx    sdk.Context
		Header *ethereumcoretypes.Header
	}
	mock.lockPruneStargazerHeader.RLock()
	calls = mock.calls.PruneStargazerHeader
	mock.lockPruneStargazerHeader.RUnlock()
	return calls
}

// SetStargazerHeader calls SetStargazerHeaderFunc.
func (mock *BlockPluginMock) SetStargazerHeader(ctx sdk.Context, header *ethereumcoretypes.Header) error {
	if mock.SetStargazerHeaderFunc == nil {
		panic("BlockPluginMock.SetStargazerHeaderFunc: method is nil but BlockPlugin.SetStargazerHeader was just called")
	}
	callInfo := struct {
		Ctx    sdk.Context
		Header *ethereumcoretypes.Header
	}{
		Ctx:    ctx,
		Header: header,
	}
	mock.lockSetStargazerHeader.Lock()
	mock.calls.SetStargazerHeader = append(mock.calls.SetStargazerHeader, callInfo)
	mock.lockSetStargazerHeader.Unlock()
	return mock.SetStargazerHeaderFunc(ctx, header)
}

// SetStargazerHeaderCalls gets all the calls that were made to SetStargazerHeader.
// Check the length with:
//
//	len(mockedBlockPlugin.SetStargazerHeaderCalls())
func (mock *BlockPluginMock) SetStargazerHeaderCalls() []struct {
	Ctx    sdk.Context
	Header *ethereumcoretypes.Header
} {
	var calls []struct {
		Ctx    sdk.Context
		Header *ethereumcoretypes.Header
	}
	mock.lockSetStargazerHeader.RLock()
	calls = mock.calls.SetStargazerHeader
	mock.lockSetStargazerHeader.RUnlock()
	return calls
}

// TrackHistoricalStargazerHeader calls TrackHistoricalStargazerHeaderFunc.
func (mock *BlockPluginMock) TrackHistoricalStargazerHeader(ctx sdk.Context, header *ethereumcoretypes.Header) {
	if mock.TrackHistoricalStargazerHeaderFunc == nil {
		panic("BlockPluginMock.TrackHistoricalStargazerHeaderFunc: method is nil but BlockPlugin.TrackHistoricalStargazerHeader was just called")
	}
	callInfo := struct {
		Ctx    sdk.Context
		Header *ethereumcoretypes.Header
	}{
		Ctx:    ctx,
		Header: header,
	}
	mock.lockTrackHistoricalStargazerHeader.Lock()
	mock.calls.TrackHistoricalStargazerHeader = append(mock.calls.TrackHistoricalStargazerHeader, callInfo)
	mock.lockTrackHistoricalStargazerHeader.Unlock()
	mock.TrackHistoricalStargazerHeaderFunc(ctx, header)
}

// TrackHistoricalStargazerHeaderCalls gets all the calls that were made to TrackHistoricalStargazerHeader.
// Check the length with:
//
//	len(mockedBlockPlugin.TrackHistoricalStargazerHeaderCalls())
func (mock *BlockPluginMock) TrackHistoricalStargazerHeaderCalls() []struct {
	Ctx    sdk.Context
	Header *ethereumcoretypes.Header
} {
	var calls []struct {
		Ctx    sdk.Context
		Header *ethereumcoretypes.Header
	}
	mock.lockTrackHistoricalStargazerHeader.RLock()
	calls = mock.calls.TrackHistoricalStargazerHeader
	mock.lockTrackHistoricalStargazerHeader.RUnlock()
	return calls
}
