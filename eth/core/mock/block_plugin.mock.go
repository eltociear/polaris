// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"pkg.berachain.dev/stargazer/eth/core"
	coretypes "pkg.berachain.dev/stargazer/eth/core/types"
	"sync"
)

// Ensure, that BlockPluginMock does implement core.BlockPlugin.
// If this is not the case, regenerate this file with moq.
var _ core.BlockPlugin = &BlockPluginMock{}

// BlockPluginMock is a mock implementation of core.BlockPlugin.
//
//	func TestSomethingThatUsesBlockPlugin(t *testing.T) {
//
//		// make and configure a mocked core.BlockPlugin
//		mockedBlockPlugin := &BlockPluginMock{
//			BaseFeeFunc: func() uint64 {
//				panic("mock out the BaseFee method")
//			},
//			GetBlockByHashFunc: func(hash common.Hash) (*types.Block, error) {
//				panic("mock out the GetBlockByHash method")
//			},
//			GetBlockByNumberFunc: func(n int64) (*types.Block, error) {
//				panic("mock out the GetBlockByNumber method")
//			},
//			GetHeaderByNumberFunc: func(n int64) (*types.Header, error) {
//				panic("mock out the GetHeaderByNumber method")
//			},
//			GetReceiptsByHashFunc: func(hash common.Hash) (types.Receipts, error) {
//				panic("mock out the GetReceiptsByHash method")
//			},
//			GetTransactionByHashFunc: func(hash common.Hash) (*coretypes.TxLookupEntry, error) {
//				panic("mock out the GetTransactionByHash method")
//			},
//			NewHeaderWithBlockNumberFunc: func(n int64) *types.Header {
//				panic("mock out the NewHeaderWithBlockNumber method")
//			},
//			PrepareFunc: func(contextMoqParam context.Context)  {
//				panic("mock out the Prepare method")
//			},
//		}
//
//		// use mockedBlockPlugin in code that requires core.BlockPlugin
//		// and then make assertions.
//
//	}
type BlockPluginMock struct {
	// BaseFeeFunc mocks the BaseFee method.
	BaseFeeFunc func() uint64

	// GetBlockByHashFunc mocks the GetBlockByHash method.
	GetBlockByHashFunc func(hash common.Hash) (*types.Block, error)

	// GetBlockByNumberFunc mocks the GetBlockByNumber method.
	GetBlockByNumberFunc func(n int64) (*types.Block, error)

	// GetHeaderByNumberFunc mocks the GetHeaderByNumber method.
	GetHeaderByNumberFunc func(n int64) (*types.Header, error)

	// GetReceiptsByHashFunc mocks the GetReceiptsByHash method.
	GetReceiptsByHashFunc func(hash common.Hash) (types.Receipts, error)

	// GetTransactionByHashFunc mocks the GetTransactionByHash method.
	GetTransactionByHashFunc func(hash common.Hash) (*coretypes.TxLookupEntry, error)

	// NewHeaderWithBlockNumberFunc mocks the NewHeaderWithBlockNumber method.
	NewHeaderWithBlockNumberFunc func(n int64) *types.Header

	// PrepareFunc mocks the Prepare method.
	PrepareFunc func(contextMoqParam context.Context)

	// calls tracks calls to the methods.
	calls struct {
		// BaseFee holds details about calls to the BaseFee method.
		BaseFee []struct {
		}
		// GetBlockByHash holds details about calls to the GetBlockByHash method.
		GetBlockByHash []struct {
			// Hash is the hash argument value.
			Hash common.Hash
		}
		// GetBlockByNumber holds details about calls to the GetBlockByNumber method.
		GetBlockByNumber []struct {
			// N is the n argument value.
			N int64
		}
		// GetHeaderByNumber holds details about calls to the GetHeaderByNumber method.
		GetHeaderByNumber []struct {
			// N is the n argument value.
			N int64
		}
		// GetReceiptsByHash holds details about calls to the GetReceiptsByHash method.
		GetReceiptsByHash []struct {
			// Hash is the hash argument value.
			Hash common.Hash
		}
		// GetTransactionByHash holds details about calls to the GetTransactionByHash method.
		GetTransactionByHash []struct {
			// Hash is the hash argument value.
			Hash common.Hash
		}
		// NewHeaderWithBlockNumber holds details about calls to the NewHeaderWithBlockNumber method.
		NewHeaderWithBlockNumber []struct {
			// N is the n argument value.
			N int64
		}
		// Prepare holds details about calls to the Prepare method.
		Prepare []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
	}
	lockBaseFee                  sync.RWMutex
	lockGetBlockByHash           sync.RWMutex
	lockGetBlockByNumber         sync.RWMutex
	lockGetHeaderByNumber        sync.RWMutex
	lockGetReceiptsByHash        sync.RWMutex
	lockGetTransactionByHash     sync.RWMutex
	lockNewHeaderWithBlockNumber sync.RWMutex
	lockPrepare                  sync.RWMutex
}

// BaseFee calls BaseFeeFunc.
func (mock *BlockPluginMock) BaseFee() uint64 {
	if mock.BaseFeeFunc == nil {
		panic("BlockPluginMock.BaseFeeFunc: method is nil but BlockPlugin.BaseFee was just called")
	}
	callInfo := struct {
	}{}
	mock.lockBaseFee.Lock()
	mock.calls.BaseFee = append(mock.calls.BaseFee, callInfo)
	mock.lockBaseFee.Unlock()
	return mock.BaseFeeFunc()
}

// BaseFeeCalls gets all the calls that were made to BaseFee.
// Check the length with:
//
//	len(mockedBlockPlugin.BaseFeeCalls())
func (mock *BlockPluginMock) BaseFeeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBaseFee.RLock()
	calls = mock.calls.BaseFee
	mock.lockBaseFee.RUnlock()
	return calls
}

// GetBlockByHash calls GetBlockByHashFunc.
func (mock *BlockPluginMock) GetBlockByHash(hash common.Hash) (*types.Block, error) {
	if mock.GetBlockByHashFunc == nil {
		panic("BlockPluginMock.GetBlockByHashFunc: method is nil but BlockPlugin.GetBlockByHash was just called")
	}
	callInfo := struct {
		Hash common.Hash
	}{
		Hash: hash,
	}
	mock.lockGetBlockByHash.Lock()
	mock.calls.GetBlockByHash = append(mock.calls.GetBlockByHash, callInfo)
	mock.lockGetBlockByHash.Unlock()
	return mock.GetBlockByHashFunc(hash)
}

// GetBlockByHashCalls gets all the calls that were made to GetBlockByHash.
// Check the length with:
//
//	len(mockedBlockPlugin.GetBlockByHashCalls())
func (mock *BlockPluginMock) GetBlockByHashCalls() []struct {
	Hash common.Hash
} {
	var calls []struct {
		Hash common.Hash
	}
	mock.lockGetBlockByHash.RLock()
	calls = mock.calls.GetBlockByHash
	mock.lockGetBlockByHash.RUnlock()
	return calls
}

// GetBlockByNumber calls GetBlockByNumberFunc.
func (mock *BlockPluginMock) GetBlockByNumber(n int64) (*types.Block, error) {
	if mock.GetBlockByNumberFunc == nil {
		panic("BlockPluginMock.GetBlockByNumberFunc: method is nil but BlockPlugin.GetBlockByNumber was just called")
	}
	callInfo := struct {
		N int64
	}{
		N: n,
	}
	mock.lockGetBlockByNumber.Lock()
	mock.calls.GetBlockByNumber = append(mock.calls.GetBlockByNumber, callInfo)
	mock.lockGetBlockByNumber.Unlock()
	return mock.GetBlockByNumberFunc(n)
}

// GetBlockByNumberCalls gets all the calls that were made to GetBlockByNumber.
// Check the length with:
//
//	len(mockedBlockPlugin.GetBlockByNumberCalls())
func (mock *BlockPluginMock) GetBlockByNumberCalls() []struct {
	N int64
} {
	var calls []struct {
		N int64
	}
	mock.lockGetBlockByNumber.RLock()
	calls = mock.calls.GetBlockByNumber
	mock.lockGetBlockByNumber.RUnlock()
	return calls
}

// GetHeaderByNumber calls GetHeaderByNumberFunc.
func (mock *BlockPluginMock) GetHeaderByNumber(n int64) (*types.Header, error) {
	if mock.GetHeaderByNumberFunc == nil {
		panic("BlockPluginMock.GetHeaderByNumberFunc: method is nil but BlockPlugin.GetHeaderByNumber was just called")
	}
	callInfo := struct {
		N int64
	}{
		N: n,
	}
	mock.lockGetHeaderByNumber.Lock()
	mock.calls.GetHeaderByNumber = append(mock.calls.GetHeaderByNumber, callInfo)
	mock.lockGetHeaderByNumber.Unlock()
	return mock.GetHeaderByNumberFunc(n)
}

// GetHeaderByNumberCalls gets all the calls that were made to GetHeaderByNumber.
// Check the length with:
//
//	len(mockedBlockPlugin.GetHeaderByNumberCalls())
func (mock *BlockPluginMock) GetHeaderByNumberCalls() []struct {
	N int64
} {
	var calls []struct {
		N int64
	}
	mock.lockGetHeaderByNumber.RLock()
	calls = mock.calls.GetHeaderByNumber
	mock.lockGetHeaderByNumber.RUnlock()
	return calls
}

// GetReceiptsByHash calls GetReceiptsByHashFunc.
func (mock *BlockPluginMock) GetReceiptsByHash(hash common.Hash) (types.Receipts, error) {
	if mock.GetReceiptsByHashFunc == nil {
		panic("BlockPluginMock.GetReceiptsByHashFunc: method is nil but BlockPlugin.GetReceiptsByHash was just called")
	}
	callInfo := struct {
		Hash common.Hash
	}{
		Hash: hash,
	}
	mock.lockGetReceiptsByHash.Lock()
	mock.calls.GetReceiptsByHash = append(mock.calls.GetReceiptsByHash, callInfo)
	mock.lockGetReceiptsByHash.Unlock()
	return mock.GetReceiptsByHashFunc(hash)
}

// GetReceiptsByHashCalls gets all the calls that were made to GetReceiptsByHash.
// Check the length with:
//
//	len(mockedBlockPlugin.GetReceiptsByHashCalls())
func (mock *BlockPluginMock) GetReceiptsByHashCalls() []struct {
	Hash common.Hash
} {
	var calls []struct {
		Hash common.Hash
	}
	mock.lockGetReceiptsByHash.RLock()
	calls = mock.calls.GetReceiptsByHash
	mock.lockGetReceiptsByHash.RUnlock()
	return calls
}

// GetTransactionByHash calls GetTransactionByHashFunc.
func (mock *BlockPluginMock) GetTransactionByHash(hash common.Hash) (*coretypes.TxLookupEntry, error) {
	if mock.GetTransactionByHashFunc == nil {
		panic("BlockPluginMock.GetTransactionByHashFunc: method is nil but BlockPlugin.GetTransactionByHash was just called")
	}
	callInfo := struct {
		Hash common.Hash
	}{
		Hash: hash,
	}
	mock.lockGetTransactionByHash.Lock()
	mock.calls.GetTransactionByHash = append(mock.calls.GetTransactionByHash, callInfo)
	mock.lockGetTransactionByHash.Unlock()
	return mock.GetTransactionByHashFunc(hash)
}

// GetTransactionByHashCalls gets all the calls that were made to GetTransactionByHash.
// Check the length with:
//
//	len(mockedBlockPlugin.GetTransactionByHashCalls())
func (mock *BlockPluginMock) GetTransactionByHashCalls() []struct {
	Hash common.Hash
} {
	var calls []struct {
		Hash common.Hash
	}
	mock.lockGetTransactionByHash.RLock()
	calls = mock.calls.GetTransactionByHash
	mock.lockGetTransactionByHash.RUnlock()
	return calls
}

// NewHeaderWithBlockNumber calls NewHeaderWithBlockNumberFunc.
func (mock *BlockPluginMock) NewHeaderWithBlockNumber(n int64) *types.Header {
	if mock.NewHeaderWithBlockNumberFunc == nil {
		panic("BlockPluginMock.NewHeaderWithBlockNumberFunc: method is nil but BlockPlugin.NewHeaderWithBlockNumber was just called")
	}
	callInfo := struct {
		N int64
	}{
		N: n,
	}
	mock.lockNewHeaderWithBlockNumber.Lock()
	mock.calls.NewHeaderWithBlockNumber = append(mock.calls.NewHeaderWithBlockNumber, callInfo)
	mock.lockNewHeaderWithBlockNumber.Unlock()
	return mock.NewHeaderWithBlockNumberFunc(n)
}

// NewHeaderWithBlockNumberCalls gets all the calls that were made to NewHeaderWithBlockNumber.
// Check the length with:
//
//	len(mockedBlockPlugin.NewHeaderWithBlockNumberCalls())
func (mock *BlockPluginMock) NewHeaderWithBlockNumberCalls() []struct {
	N int64
} {
	var calls []struct {
		N int64
	}
	mock.lockNewHeaderWithBlockNumber.RLock()
	calls = mock.calls.NewHeaderWithBlockNumber
	mock.lockNewHeaderWithBlockNumber.RUnlock()
	return calls
}

// Prepare calls PrepareFunc.
func (mock *BlockPluginMock) Prepare(contextMoqParam context.Context) {
	if mock.PrepareFunc == nil {
		panic("BlockPluginMock.PrepareFunc: method is nil but BlockPlugin.Prepare was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockPrepare.Lock()
	mock.calls.Prepare = append(mock.calls.Prepare, callInfo)
	mock.lockPrepare.Unlock()
	mock.PrepareFunc(contextMoqParam)
}

// PrepareCalls gets all the calls that were made to Prepare.
// Check the length with:
//
//	len(mockedBlockPlugin.PrepareCalls())
func (mock *BlockPluginMock) PrepareCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockPrepare.RLock()
	calls = mock.calls.Prepare
	mock.lockPrepare.RUnlock()
	return calls
}
