// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	ethcorevm "github.com/berachain/stargazer/eth/core/vm"
	"github.com/ethereum/go-ethereum/common"
	ethereumcorevm "github.com/ethereum/go-ethereum/core/vm"
	"github.com/ethereum/go-ethereum/params"
	"math/big"
	"sync"
)

// Ensure, that StargazerEVMMock does implement ethcorevm.StargazerEVM.
// If this is not the case, regenerate this file with moq.
var _ ethcorevm.StargazerEVM = &StargazerEVMMock{}

// StargazerEVMMock is a mock implementation of ethcorevm.StargazerEVM.
//
//	func TestSomethingThatUsesStargazerEVM(t *testing.T) {
//
//		// make and configure a mocked ethcorevm.StargazerEVM
//		mockedStargazerEVM := &StargazerEVMMock{
//			CallFunc: func(caller ethereumcorevm.ContractRef, addr common.Address, input []byte, gas uint64, value *big.Int) ([]byte, uint64, error) {
//				panic("mock out the Call method")
//			},
//			ChainConfigFunc: func() *params.ChainConfig {
//				panic("mock out the ChainConfig method")
//			},
//			ContextFunc: func() ethereumcorevm.BlockContext {
//				panic("mock out the Context method")
//			},
//			CreateFunc: func(caller ethereumcorevm.ContractRef, code []byte, gas uint64, value *big.Int) ([]byte, common.Address, uint64, error) {
//				panic("mock out the Create method")
//			},
//			ResetFunc: func(txCtx ethereumcorevm.TxContext, sdb ethereumcorevm.StateDB)  {
//				panic("mock out the Reset method")
//			},
//			SetDebugFunc: func(debug bool)  {
//				panic("mock out the SetDebug method")
//			},
//			SetTracerFunc: func(tracer ethereumcorevm.EVMLogger)  {
//				panic("mock out the SetTracer method")
//			},
//			SetTxContextFunc: func(txCtx ethereumcorevm.TxContext)  {
//				panic("mock out the SetTxContext method")
//			},
//			StateDBFunc: func() ethcorevm.StargazerStateDB {
//				panic("mock out the StateDB method")
//			},
//			TracerFunc: func() ethereumcorevm.EVMLogger {
//				panic("mock out the Tracer method")
//			},
//			TxContextFunc: func() ethereumcorevm.TxContext {
//				panic("mock out the TxContext method")
//			},
//		}
//
//		// use mockedStargazerEVM in code that requires ethcorevm.StargazerEVM
//		// and then make assertions.
//
//	}
type StargazerEVMMock struct {
	// CallFunc mocks the Call method.
	CallFunc func(caller ethereumcorevm.ContractRef, addr common.Address, input []byte, gas uint64, value *big.Int) ([]byte, uint64, error)

	// ChainConfigFunc mocks the ChainConfig method.
	ChainConfigFunc func() *params.ChainConfig

	// ContextFunc mocks the Context method.
	ContextFunc func() ethereumcorevm.BlockContext

	// CreateFunc mocks the Create method.
	CreateFunc func(caller ethereumcorevm.ContractRef, code []byte, gas uint64, value *big.Int) ([]byte, common.Address, uint64, error)

	// ResetFunc mocks the Reset method.
	ResetFunc func(txCtx ethereumcorevm.TxContext, sdb ethereumcorevm.StateDB)

	// SetDebugFunc mocks the SetDebug method.
	SetDebugFunc func(debug bool)

	// SetTracerFunc mocks the SetTracer method.
	SetTracerFunc func(tracer ethereumcorevm.EVMLogger)

	// SetTxContextFunc mocks the SetTxContext method.
	SetTxContextFunc func(txCtx ethereumcorevm.TxContext)

	// StateDBFunc mocks the StateDB method.
	StateDBFunc func() ethcorevm.StargazerStateDB

	// TracerFunc mocks the Tracer method.
	TracerFunc func() ethereumcorevm.EVMLogger

	// TxContextFunc mocks the TxContext method.
	TxContextFunc func() ethereumcorevm.TxContext

	// calls tracks calls to the methods.
	calls struct {
		// Call holds details about calls to the Call method.
		Call []struct {
			// Caller is the caller argument value.
			Caller ethereumcorevm.ContractRef
			// Addr is the addr argument value.
			Addr common.Address
			// Input is the input argument value.
			Input []byte
			// Gas is the gas argument value.
			Gas uint64
			// Value is the value argument value.
			Value *big.Int
		}
		// ChainConfig holds details about calls to the ChainConfig method.
		ChainConfig []struct {
		}
		// Context holds details about calls to the Context method.
		Context []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Caller is the caller argument value.
			Caller ethereumcorevm.ContractRef
			// Code is the code argument value.
			Code []byte
			// Gas is the gas argument value.
			Gas uint64
			// Value is the value argument value.
			Value *big.Int
		}
		// Reset holds details about calls to the Reset method.
		Reset []struct {
			// TxCtx is the txCtx argument value.
			TxCtx ethereumcorevm.TxContext
			// Sdb is the sdb argument value.
			Sdb ethereumcorevm.StateDB
		}
		// SetDebug holds details about calls to the SetDebug method.
		SetDebug []struct {
			// Debug is the debug argument value.
			Debug bool
		}
		// SetTracer holds details about calls to the SetTracer method.
		SetTracer []struct {
			// Tracer is the tracer argument value.
			Tracer ethereumcorevm.EVMLogger
		}
		// SetTxContext holds details about calls to the SetTxContext method.
		SetTxContext []struct {
			// TxCtx is the txCtx argument value.
			TxCtx ethereumcorevm.TxContext
		}
		// StateDB holds details about calls to the StateDB method.
		StateDB []struct {
		}
		// Tracer holds details about calls to the Tracer method.
		Tracer []struct {
		}
		// TxContext holds details about calls to the TxContext method.
		TxContext []struct {
		}
	}
	lockCall         sync.RWMutex
	lockChainConfig  sync.RWMutex
	lockContext      sync.RWMutex
	lockCreate       sync.RWMutex
	lockReset        sync.RWMutex
	lockSetDebug     sync.RWMutex
	lockSetTracer    sync.RWMutex
	lockSetTxContext sync.RWMutex
	lockStateDB      sync.RWMutex
	lockTracer       sync.RWMutex
	lockTxContext    sync.RWMutex
}

// Call calls CallFunc.
func (mock *StargazerEVMMock) Call(caller ethereumcorevm.ContractRef, addr common.Address, input []byte, gas uint64, value *big.Int) ([]byte, uint64, error) {
	if mock.CallFunc == nil {
		panic("StargazerEVMMock.CallFunc: method is nil but StargazerEVM.Call was just called")
	}
	callInfo := struct {
		Caller ethereumcorevm.ContractRef
		Addr   common.Address
		Input  []byte
		Gas    uint64
		Value  *big.Int
	}{
		Caller: caller,
		Addr:   addr,
		Input:  input,
		Gas:    gas,
		Value:  value,
	}
	mock.lockCall.Lock()
	mock.calls.Call = append(mock.calls.Call, callInfo)
	mock.lockCall.Unlock()
	return mock.CallFunc(caller, addr, input, gas, value)
}

// CallCalls gets all the calls that were made to Call.
// Check the length with:
//
//	len(mockedStargazerEVM.CallCalls())
func (mock *StargazerEVMMock) CallCalls() []struct {
	Caller ethereumcorevm.ContractRef
	Addr   common.Address
	Input  []byte
	Gas    uint64
	Value  *big.Int
} {
	var calls []struct {
		Caller ethereumcorevm.ContractRef
		Addr   common.Address
		Input  []byte
		Gas    uint64
		Value  *big.Int
	}
	mock.lockCall.RLock()
	calls = mock.calls.Call
	mock.lockCall.RUnlock()
	return calls
}

// ChainConfig calls ChainConfigFunc.
func (mock *StargazerEVMMock) ChainConfig() *params.ChainConfig {
	if mock.ChainConfigFunc == nil {
		panic("StargazerEVMMock.ChainConfigFunc: method is nil but StargazerEVM.ChainConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockChainConfig.Lock()
	mock.calls.ChainConfig = append(mock.calls.ChainConfig, callInfo)
	mock.lockChainConfig.Unlock()
	return mock.ChainConfigFunc()
}

// ChainConfigCalls gets all the calls that were made to ChainConfig.
// Check the length with:
//
//	len(mockedStargazerEVM.ChainConfigCalls())
func (mock *StargazerEVMMock) ChainConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockChainConfig.RLock()
	calls = mock.calls.ChainConfig
	mock.lockChainConfig.RUnlock()
	return calls
}

// Context calls ContextFunc.
func (mock *StargazerEVMMock) Context() ethereumcorevm.BlockContext {
	if mock.ContextFunc == nil {
		panic("StargazerEVMMock.ContextFunc: method is nil but StargazerEVM.Context was just called")
	}
	callInfo := struct {
	}{}
	mock.lockContext.Lock()
	mock.calls.Context = append(mock.calls.Context, callInfo)
	mock.lockContext.Unlock()
	return mock.ContextFunc()
}

// ContextCalls gets all the calls that were made to Context.
// Check the length with:
//
//	len(mockedStargazerEVM.ContextCalls())
func (mock *StargazerEVMMock) ContextCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockContext.RLock()
	calls = mock.calls.Context
	mock.lockContext.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *StargazerEVMMock) Create(caller ethereumcorevm.ContractRef, code []byte, gas uint64, value *big.Int) ([]byte, common.Address, uint64, error) {
	if mock.CreateFunc == nil {
		panic("StargazerEVMMock.CreateFunc: method is nil but StargazerEVM.Create was just called")
	}
	callInfo := struct {
		Caller ethereumcorevm.ContractRef
		Code   []byte
		Gas    uint64
		Value  *big.Int
	}{
		Caller: caller,
		Code:   code,
		Gas:    gas,
		Value:  value,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(caller, code, gas, value)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedStargazerEVM.CreateCalls())
func (mock *StargazerEVMMock) CreateCalls() []struct {
	Caller ethereumcorevm.ContractRef
	Code   []byte
	Gas    uint64
	Value  *big.Int
} {
	var calls []struct {
		Caller ethereumcorevm.ContractRef
		Code   []byte
		Gas    uint64
		Value  *big.Int
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Reset calls ResetFunc.
func (mock *StargazerEVMMock) Reset(txCtx ethereumcorevm.TxContext, sdb ethereumcorevm.StateDB) {
	if mock.ResetFunc == nil {
		panic("StargazerEVMMock.ResetFunc: method is nil but StargazerEVM.Reset was just called")
	}
	callInfo := struct {
		TxCtx ethereumcorevm.TxContext
		Sdb   ethereumcorevm.StateDB
	}{
		TxCtx: txCtx,
		Sdb:   sdb,
	}
	mock.lockReset.Lock()
	mock.calls.Reset = append(mock.calls.Reset, callInfo)
	mock.lockReset.Unlock()
	mock.ResetFunc(txCtx, sdb)
}

// ResetCalls gets all the calls that were made to Reset.
// Check the length with:
//
//	len(mockedStargazerEVM.ResetCalls())
func (mock *StargazerEVMMock) ResetCalls() []struct {
	TxCtx ethereumcorevm.TxContext
	Sdb   ethereumcorevm.StateDB
} {
	var calls []struct {
		TxCtx ethereumcorevm.TxContext
		Sdb   ethereumcorevm.StateDB
	}
	mock.lockReset.RLock()
	calls = mock.calls.Reset
	mock.lockReset.RUnlock()
	return calls
}

// SetDebug calls SetDebugFunc.
func (mock *StargazerEVMMock) SetDebug(debug bool) {
	if mock.SetDebugFunc == nil {
		panic("StargazerEVMMock.SetDebugFunc: method is nil but StargazerEVM.SetDebug was just called")
	}
	callInfo := struct {
		Debug bool
	}{
		Debug: debug,
	}
	mock.lockSetDebug.Lock()
	mock.calls.SetDebug = append(mock.calls.SetDebug, callInfo)
	mock.lockSetDebug.Unlock()
	mock.SetDebugFunc(debug)
}

// SetDebugCalls gets all the calls that were made to SetDebug.
// Check the length with:
//
//	len(mockedStargazerEVM.SetDebugCalls())
func (mock *StargazerEVMMock) SetDebugCalls() []struct {
	Debug bool
} {
	var calls []struct {
		Debug bool
	}
	mock.lockSetDebug.RLock()
	calls = mock.calls.SetDebug
	mock.lockSetDebug.RUnlock()
	return calls
}

// SetTracer calls SetTracerFunc.
func (mock *StargazerEVMMock) SetTracer(tracer ethereumcorevm.EVMLogger) {
	if mock.SetTracerFunc == nil {
		panic("StargazerEVMMock.SetTracerFunc: method is nil but StargazerEVM.SetTracer was just called")
	}
	callInfo := struct {
		Tracer ethereumcorevm.EVMLogger
	}{
		Tracer: tracer,
	}
	mock.lockSetTracer.Lock()
	mock.calls.SetTracer = append(mock.calls.SetTracer, callInfo)
	mock.lockSetTracer.Unlock()
	mock.SetTracerFunc(tracer)
}

// SetTracerCalls gets all the calls that were made to SetTracer.
// Check the length with:
//
//	len(mockedStargazerEVM.SetTracerCalls())
func (mock *StargazerEVMMock) SetTracerCalls() []struct {
	Tracer ethereumcorevm.EVMLogger
} {
	var calls []struct {
		Tracer ethereumcorevm.EVMLogger
	}
	mock.lockSetTracer.RLock()
	calls = mock.calls.SetTracer
	mock.lockSetTracer.RUnlock()
	return calls
}

// SetTxContext calls SetTxContextFunc.
func (mock *StargazerEVMMock) SetTxContext(txCtx ethereumcorevm.TxContext) {
	if mock.SetTxContextFunc == nil {
		panic("StargazerEVMMock.SetTxContextFunc: method is nil but StargazerEVM.SetTxContext was just called")
	}
	callInfo := struct {
		TxCtx ethereumcorevm.TxContext
	}{
		TxCtx: txCtx,
	}
	mock.lockSetTxContext.Lock()
	mock.calls.SetTxContext = append(mock.calls.SetTxContext, callInfo)
	mock.lockSetTxContext.Unlock()
	mock.SetTxContextFunc(txCtx)
}

// SetTxContextCalls gets all the calls that were made to SetTxContext.
// Check the length with:
//
//	len(mockedStargazerEVM.SetTxContextCalls())
func (mock *StargazerEVMMock) SetTxContextCalls() []struct {
	TxCtx ethereumcorevm.TxContext
} {
	var calls []struct {
		TxCtx ethereumcorevm.TxContext
	}
	mock.lockSetTxContext.RLock()
	calls = mock.calls.SetTxContext
	mock.lockSetTxContext.RUnlock()
	return calls
}

// StateDB calls StateDBFunc.
func (mock *StargazerEVMMock) StateDB() ethcorevm.StargazerStateDB {
	if mock.StateDBFunc == nil {
		panic("StargazerEVMMock.StateDBFunc: method is nil but StargazerEVM.StateDB was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStateDB.Lock()
	mock.calls.StateDB = append(mock.calls.StateDB, callInfo)
	mock.lockStateDB.Unlock()
	return mock.StateDBFunc()
}

// StateDBCalls gets all the calls that were made to StateDB.
// Check the length with:
//
//	len(mockedStargazerEVM.StateDBCalls())
func (mock *StargazerEVMMock) StateDBCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStateDB.RLock()
	calls = mock.calls.StateDB
	mock.lockStateDB.RUnlock()
	return calls
}

// Tracer calls TracerFunc.
func (mock *StargazerEVMMock) Tracer() ethereumcorevm.EVMLogger {
	if mock.TracerFunc == nil {
		panic("StargazerEVMMock.TracerFunc: method is nil but StargazerEVM.Tracer was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTracer.Lock()
	mock.calls.Tracer = append(mock.calls.Tracer, callInfo)
	mock.lockTracer.Unlock()
	return mock.TracerFunc()
}

// TracerCalls gets all the calls that were made to Tracer.
// Check the length with:
//
//	len(mockedStargazerEVM.TracerCalls())
func (mock *StargazerEVMMock) TracerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTracer.RLock()
	calls = mock.calls.Tracer
	mock.lockTracer.RUnlock()
	return calls
}

// TxContext calls TxContextFunc.
func (mock *StargazerEVMMock) TxContext() ethereumcorevm.TxContext {
	if mock.TxContextFunc == nil {
		panic("StargazerEVMMock.TxContextFunc: method is nil but StargazerEVM.TxContext was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTxContext.Lock()
	mock.calls.TxContext = append(mock.calls.TxContext, callInfo)
	mock.lockTxContext.Unlock()
	return mock.TxContextFunc()
}

// TxContextCalls gets all the calls that were made to TxContext.
// Check the length with:
//
//	len(mockedStargazerEVM.TxContextCalls())
func (mock *StargazerEVMMock) TxContextCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTxContext.RLock()
	calls = mock.calls.TxContext
	mock.lockTxContext.RUnlock()
	return calls
}
