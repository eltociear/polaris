// Code generated by rlpgen. DO NOT EDIT.

//go:build !norlpgen
// +build !norlpgen

package types

import "github.com/ethereum/go-ethereum/common"
import "github.com/ethereum/go-ethereum/core/types"
import "github.com/ethereum/go-ethereum/rlp"
import "io"

func (obj *StargazerBlock) EncodeRLP(_w io.Writer) error {
	w := rlp.NewEncoderBuffer(_w)
	_tmp0 := w.List()
	if obj.StargazerHeader == nil {
		w.Write([]byte{0xC0})
	} else {
		_tmp1 := w.List()
		if obj.StargazerHeader.Header == nil {
			w.Write([]byte{0xC0})
		} else {
			_tmp2 := w.List()
			w.WriteBytes(obj.StargazerHeader.Header.ParentHash[:])
			w.WriteBytes(obj.StargazerHeader.Header.UncleHash[:])
			w.WriteBytes(obj.StargazerHeader.Header.Coinbase[:])
			w.WriteBytes(obj.StargazerHeader.Header.Root[:])
			w.WriteBytes(obj.StargazerHeader.Header.TxHash[:])
			w.WriteBytes(obj.StargazerHeader.Header.ReceiptHash[:])
			w.WriteBytes(obj.StargazerHeader.Header.Bloom[:])
			if obj.StargazerHeader.Header.Difficulty == nil {
				w.Write(rlp.EmptyString)
			} else {
				if obj.StargazerHeader.Header.Difficulty.Sign() == -1 {
					return rlp.ErrNegativeBigInt
				}
				w.WriteBigInt(obj.StargazerHeader.Header.Difficulty)
			}
			if obj.StargazerHeader.Header.Number == nil {
				w.Write(rlp.EmptyString)
			} else {
				if obj.StargazerHeader.Header.Number.Sign() == -1 {
					return rlp.ErrNegativeBigInt
				}
				w.WriteBigInt(obj.StargazerHeader.Header.Number)
			}
			w.WriteUint64(obj.StargazerHeader.Header.GasLimit)
			w.WriteUint64(obj.StargazerHeader.Header.GasUsed)
			w.WriteUint64(obj.StargazerHeader.Header.Time)
			w.WriteBytes(obj.StargazerHeader.Header.Extra)
			w.WriteBytes(obj.StargazerHeader.Header.MixDigest[:])
			w.WriteBytes(obj.StargazerHeader.Header.Nonce[:])
			_tmp3 := obj.StargazerHeader.Header.BaseFee != nil
			if _tmp3 {
				if obj.StargazerHeader.Header.BaseFee == nil {
					w.Write(rlp.EmptyString)
				} else {
					if obj.StargazerHeader.Header.BaseFee.Sign() == -1 {
						return rlp.ErrNegativeBigInt
					}
					w.WriteBigInt(obj.StargazerHeader.Header.BaseFee)
				}
			}
			w.ListEnd(_tmp2)
		}
		w.ListEnd(_tmp1)
	}
	w.ListEnd(_tmp0)
	return w.Flush()
}

func (obj *StargazerBlock) DecodeRLP(dec *rlp.Stream) error {
	var _tmp0 StargazerBlock
	{
		if _, err := dec.List(); err != nil {
			return err
		}
		// StargazerHeader:
		var _tmp1 StargazerHeader
		{
			if _, err := dec.List(); err != nil {
				return err
			}
			// Header:
			var _tmp2 types.Header
			{
				if _, err := dec.List(); err != nil {
					return err
				}
				// ParentHash:
				var _tmp3 common.Hash
				if err := dec.ReadBytes(_tmp3[:]); err != nil {
					return err
				}
				_tmp2.ParentHash = _tmp3
				// UncleHash:
				var _tmp4 common.Hash
				if err := dec.ReadBytes(_tmp4[:]); err != nil {
					return err
				}
				_tmp2.UncleHash = _tmp4
				// Coinbase:
				var _tmp5 common.Address
				if err := dec.ReadBytes(_tmp5[:]); err != nil {
					return err
				}
				_tmp2.Coinbase = _tmp5
				// Root:
				var _tmp6 common.Hash
				if err := dec.ReadBytes(_tmp6[:]); err != nil {
					return err
				}
				_tmp2.Root = _tmp6
				// TxHash:
				var _tmp7 common.Hash
				if err := dec.ReadBytes(_tmp7[:]); err != nil {
					return err
				}
				_tmp2.TxHash = _tmp7
				// ReceiptHash:
				var _tmp8 common.Hash
				if err := dec.ReadBytes(_tmp8[:]); err != nil {
					return err
				}
				_tmp2.ReceiptHash = _tmp8
				// Bloom:
				var _tmp9 types.Bloom
				if err := dec.ReadBytes(_tmp9[:]); err != nil {
					return err
				}
				_tmp2.Bloom = _tmp9
				// Difficulty:
				_tmp10, err := dec.BigInt()
				if err != nil {
					return err
				}
				_tmp2.Difficulty = _tmp10
				// Number:
				_tmp11, err := dec.BigInt()
				if err != nil {
					return err
				}
				_tmp2.Number = _tmp11
				// GasLimit:
				_tmp12, err := dec.Uint64()
				if err != nil {
					return err
				}
				_tmp2.GasLimit = _tmp12
				// GasUsed:
				_tmp13, err := dec.Uint64()
				if err != nil {
					return err
				}
				_tmp2.GasUsed = _tmp13
				// Time:
				_tmp14, err := dec.Uint64()
				if err != nil {
					return err
				}
				_tmp2.Time = _tmp14
				// Extra:
				_tmp15, err := dec.Bytes()
				if err != nil {
					return err
				}
				_tmp2.Extra = _tmp15
				// MixDigest:
				var _tmp16 common.Hash
				if err := dec.ReadBytes(_tmp16[:]); err != nil {
					return err
				}
				_tmp2.MixDigest = _tmp16
				// Nonce:
				var _tmp17 types.BlockNonce
				if err := dec.ReadBytes(_tmp17[:]); err != nil {
					return err
				}
				_tmp2.Nonce = _tmp17
				// BaseFee:
				if dec.MoreDataInList() {
					_tmp18, err := dec.BigInt()
					if err != nil {
						return err
					}
					_tmp2.BaseFee = _tmp18
				}
				if err := dec.ListEnd(); err != nil {
					return err
				}
			}
			_tmp1.Header = &_tmp2
			if err := dec.ListEnd(); err != nil {
				return err
			}
		}
		_tmp0.StargazerHeader = &_tmp1
		if err := dec.ListEnd(); err != nil {
			return err
		}
	}
	*obj = _tmp0
	return nil
}
